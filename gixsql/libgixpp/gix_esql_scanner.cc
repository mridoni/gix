#line 1 "gix_esql_scanner.cc"
#include <stdint.h>

#line 4 "gix_esql_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 184
#define YY_END_OF_BUFFER 185
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1469] =
    {   0,
        0,    0,    0,    0,  152,  152,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,  119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  185,  183,  181,  180,  183,  183,  183,  183,
      183,  183,  183,  183,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  175,  175,  174,  175,  175,  175,
      175,  172,  173,  143,  143,  143,  143,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  175,  184,  181,  180,  184,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,  184,   49,   89,  184,   93,   93,   93,   67,
      184,   80,  184,   80,   86,   86,   80,   66,   87,   86,
       81,   87,   86,   86,   86,   86,   86,   86,   86,   86,
       80,  184,   86,  176,  184,  184,   10,   10,    9,   10,
        7,    8,   10,    7,   12,   11,  184,   12,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  184,
      125,  184,   17,   17,   15,   17,   17,  184,   17,   95,
      184,  106,  111,  106,   96,  107,  184,  111,  111,  111,
      111,  111,  111,  111,  184,  111,  184,   24,   24,   22,
       24,   24,   24,  184,   24,   64,  184,  184,   63,   63,

       61,  184,   63,   63,   63,   63,   63,  184,   63,   53,
       52,   52,   53,   53,   53,  181,  180,    0,    0,    0,
        0,    0,    0,    0,    0,  179,    0,  179,  179,  179,
      179,  179,  178,  179,  179,  179,  179,  174,    0,    0,
      171,    0,  172,    0,    0,  143,  143,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  134,  172,  172,  172,
      166,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  139,  172,  172,  172,
      172,  172,    0,    0,  180,   49,    0,   49,   29,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   89,   93,   93,   93,   67,   80,    0,    0,
       82,   86,    0,    0,   86,   86,    0,    0,   86,   80,
       81,   83,    0,   81,   68,    0,   86,   86,   86,   86,
       86,   86,   86,   86,   71,   86,   86,   86,  176,    0,
        0,  177,    9,    7,    0,    7,   12,    0,   12,   11,
        0,   11,  125,    0,    0,  125,  125,  125,  125,  125,
      125,  125,  125,  112,  125,  125,  125,  125,    0,    0,
       16,   17,    0,   17,   17,    0,   17,   15,    0,   15,
       17,   17,   95,  106,  111,    0,    0,  111,  106,  107,
      108,    0,  107,   97,    0,  111,  111,  111,  111,  111,

      111,  111,  111,  111,    0,    0,   23,   24,    0,   24,
       24,    0,   24,   22,    0,   22,   24,   24,   24,   64,
        0,    0,   62,   63,    0,   63,   63,    0,   63,   61,
        0,   61,   65,    0,   56,   55,   63,   63,   54,   63,
       52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  171,
        0,  152,    0,  143,    0,  172,  129,  143,    0,  170,
      167,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  135,  172,  155,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,    0,    0,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   93,   93,   82,   82,
       82,   86,   86,    0,   86,   86,   86,    0,   86,   81,
       86,   86,   75,   86,   86,   86,   86,   86,   86,   86,
       86,   11,  125,  125,    0,  125,    0,  119,    0,  125,
      125,  125,  125,  125,  125,  125,  122,  125,  125,   16,
       16,   15,   17,   17,  111,  111,    0,  111,  107,  111,
      111,  103,  111,  111,  111,  111,  111,  111,   23,   23,
       22,   24,   24,   24,   62,   62,   61,   63,   63,   63,

       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      179,  179,  179,  179,  179,  179,  179,  179,    0,    0,
      129,  172,  172,  148,  172,  145,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  152,  172,  172,  172,  161,
        0,  172,  172,  172,  172,  172,  172,  172,  172,  171,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   37,   49,   49,   49,   49,   93,   93,   86,   86,
       70,   86,   78,   86,   86,   86,   86,   86,  119,    0,
        0,  125,  115,  125,  125,  125,  125,  125,  119,  125,

      125,   17,   13,  111,  111,  100,  105,  111,  111,  111,
      111,   24,   24,   24,   63,   63,   57,   63,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  179,  179,  179,
      179,  172,  172,    0,  172,  172,  172,  172,  172,    0,
      172,  152,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,    0,  172,  172,  172,    0,  168,  172,
      172,  144,  169,  172,  172,  172,   38,   49,   49,   49,
       49,   49,   49,   39,   49,   49,   49,   49,   49,   49,
       49,   93,   90,   86,   86,   86,   86,   86,   77,   86,
        0,  125,  125,  125,  125,  125,  119,  125,  125,  125,

      125,  125,   17,  111,  111,  111,  111,   98,    0,   24,
       24,   19,   63,   63,   58,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  179,  179,  179,  179,  172,  146,
        0,  172,  172,  156,  157,  158,  159,  172,  172,    0,
      172,    0,  172,  172,  172,  172,  172,  172,  172,  172,
      137,  172,  172,    0,  172,  172,  172,    0,  172,  172,
      169,  172,  172,  172,   43,   49,   49,   32,   49,   49,
       48,   49,   31,   49,   49,   30,   36,   93,   73,   86,
       86,   86,   69,    0,    0,  113,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,   17,  101,  111,   99,

      111,    0,   24,   24,   63,   63,    0,    0,   88,    0,
        0,    0,    0,    0,    0,    0,  179,  179,  179,  179,
      172,    0,  148,  172,  172,  154,  172,    0,  172,    0,
      142,  153,  162,  172,  172,  172,  154,  172,  136,  172,
        0,  152,    0,    0,    0,  172,    0,  172,  172,  172,
      150,  172,    0,   33,   26,   49,   28,   25,   27,   49,
       93,   86,   86,   86,    0,    0,  125,  115,  125,  121,
      125,  125,  120,  121,    0,  119,    0,  125,  117,   17,
      111,  111,    0,   24,   24,   63,   63,    0,    0,    1,
        0,    0,    0,    0,    0,  179,  179,  179,  172,    0,

      172,  172,    0,  172,    1,  165,    0,  152,    0,    0,
        0,  172,  172,    0,  172,  172,    0,    0,    0,    0,
      163,    0,  164,  172,  172,    0,  149,  172,    0,    0,
       49,   47,   92,   85,   86,   86,    0,    0,  125,  125,
      125,  123,    0,  119,    0,  125,  125,  119,    0,    0,
      125,  125,  116,   14,  110,  111,    0,   21,   24,   60,
       63,   51,    0,    0,    0,    0,    0,    0,  179,  179,
      179,  141,  146,  172,  172,    0,  140,    0,    0,    0,
        0,    0,    0,  172,  171,    0,  172,  172,    0,    0,
        0,  138,  147,    0,    0,  172,    0,    0,   49,    0,

        0,   91,    0,   84,   86,   72,    0,   74,  113,  125,
      125,    0,  124,  119,    0,    0,  125,  125,  114,  125,
      125,    0,  109,  104,  102,    0,   20,   18,   63,    0,
       50,    0,    0,    0,    0,    0,    0,  179,  179,    0,
      172,  172,    0,  154,    0,    0,    0,    0,    0,  142,
      153,  172,    0,  154,    0,  172,    0,    0,    0,    0,
      150,    0,  172,    0,    0,   35,    0,   84,   86,    0,
      125,    0,  121,    0,  124,  120,    0,  121,    0,  125,
      117,  125,  109,   63,    0,    0,    0,    0,    0,    0,
      179,  179,    0,  172,  172,    0,    0,    0,    0,    0,

        0,  172,    0,    0,  172,    0,    0,  160,    0,  149,
      172,   42,    0,    0,    0,    0,  125,  121,    0,    0,
      121,    0,    0,  125,  116,    0,    0,    0,    0,    0,
        0,    0,  179,  179,    0,  172,  172,  140,  126,    0,
        0,  172,  172,    0,    0,  147,  172,    0,    0,    0,
        0,    0,    0,  125,  114,    0,    0,    0,    6,    0,
        0,    0,    0,  179,  179,  141,  172,  172,    0,    0,
      172,  172,    0,    0,  172,    0,    0,    0,   34,   46,
       76,    0,  125,   59,    0,    2,    0,    0,    0,    0,
      179,    0,  172,    0,    0,    0,  172,    0,    0,  172,

        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,
        0,  179,    0,  172,    0,    0,    0,    0,    0,  132,
        0,  133,  172,    0,    0,    0,    0,    0,    0,    0,
      125,    0,    5,    0,    0,    0,  141,  172,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   79,  125,    0,
        0,    0,  151,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  118,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  125,    0,    0,   94,    0,
        0,    0,    0,    0,    0,   40,    0,    0,    0,  125,
        0,    0,  151,    0,    0,    0,    0,    0,    0,    0,

      118,    0,    0,    0,    0,    0,    0,    0,   44,    0,
        0,    4,    0,    0,  131,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,    0,    0,    0,    3,    0,
        0,   41,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      128,    0,  128,  128,  127,  127,  127,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    1,    8,    6,    9,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   19,
       20,   17,   21,   22,   23,   24,   17,   25,   26,    8,
        8,    8,    6,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   54,   56,   53,   57,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   53,   55,   27,   55,   27,    1,   55,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[85] =
    {   0,
        1,    1,    2,    3,    4,    1,    5,    1,    6,    7,
        7,    8,    9,    1,   10,   11,   10,   10,   10,   10,
       10,   10,   10,   10,   12,    3,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   13,   13,   13,   15,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   16,   16
    } ;

static const flex_int16_t yy_base[1624] =
    {   0,
        0,   79,  158,  237,  317,    0,  401,    0,  485,  569,
        4,    8,  653,    0,  737,  821,  905,  989, 1073, 1157,
     1241,    0, 1325, 1409, 1493,    0, 1577, 1661, 1745, 1829,
       12,   16, 2749, 7782,   20, 7782, 2704,    0,    0,    4,
        0,    4,    0,    5, 2635,   21,   22,   13,    8,   51,
       19,   72,   11,   63, 7782,   47, 7782, 2643,    0, 2615,
       79, 2479, 7782,  149,  228,  503,  533,   74,   68,   81,
       96,   64,  146,  134,  194,   43,  174,  219,  226,  567,
      229,  140,  231,  233,   44, 1899, 7782,   52, 7782, 2552,
        9,  451,  461,  526,  536,  476,  564,  559,  555,  712,

      481,  714,    0,   23, 7782, 2519,    0,   84,  132, 7782,
     2439,  753,    0,  761, 1956,  115,  843, 7782, 7782,  198,
      112,  129,  756,  770,  850,  853,  858,  796,  869,  934,
      950,    0,  209, 7782, 2380,  197, 7782,  281, 7782, 2368,
      109, 7782,    0,  178,  195,  207,    0,  224,  530,  963,
      938, 1019,  856,  927,  986, 1012,  845, 1024,  761,    0,
      759,    0, 2040,  421,  423,  719,  967,    0,  431, 7782,
     2283, 1098,  798, 1118, 7782,  507,  533, 1102, 1052, 1104,
     1106, 1322, 1008, 1132,    0,  948,    0, 2124,  483,  523,
      978, 1031,  724,    0,  538, 7782, 2278,    0, 2208,  553,

      672,  775, 1120, 1068, 1033, 1136, 1145,    0,  698, 7782,
      644, 7782, 2276,  811,  477,  855, 7782,  520,  535,  572,
      732,  744,  776,  825,  826, 2236,    0,  933,  935, 1013,
     1177,  834, 2178, 1154,  997, 1025, 1319, 7782, 2165, 2154,
     2146, 1213, 2070, 2278, 1325, 1354, 2335, 1314, 1324, 1306,
     1319, 1337, 1360, 1308, 1396, 1397, 2065, 1362, 1070, 1393,
     2044, 1364, 1378, 1398, 1392, 1155, 1408, 1557, 1321, 1377,
     1562, 1407, 1545, 1558, 1555, 1559, 2032, 1568,  980, 1569,
     1561, 1571,    0,    0, 7782,  779,    0,  781,  863, 1565,
     1641, 1620, 1607, 1646, 1637, 1635, 1680, 1696, 1700, 1653,

     1721, 1682, 7782,    0, 1337, 1414, 7782, 1783, 2101, 2055,
     2418, 2502, 2586, 2670,    0, 1116, 1611,    0, 1122, 1854,
      888, 7782,    0,  892, 7782, 2010, 1769, 1766, 1852, 1856,
     1847, 1658, 1809, 1864, 1618, 1858, 1883, 1691, 7782,  635,
      882, 7782, 7782,  954,    0, 1057, 1060,    0, 1278, 1367,
        0, 1383, 1866, 1764,    0, 1892, 2692, 1918, 1916, 1913,
     1953, 1935, 1974, 1909, 1989, 2000, 2004, 1993, 1999, 1979,
     2776, 2860, 2944,    0, 1401,    0, 1403, 1405,    0, 1527,
     1947, 1736, 7782, 2085, 1987, 1806,    0, 2006, 2146, 1531,
     7782,    0, 1573, 7782, 1968, 2062, 2083, 2102, 2037, 2027,

     2100, 2106, 2159, 2144, 1945, 1893, 2970, 3054, 3138,    0,
     1588,    0, 1615, 1650,    0, 1703, 2002, 2073, 1951, 7782,
     1889, 1877, 3164, 3248, 3332,    0, 1729,    0, 1732, 1817,
        0, 1821, 7782, 1870, 1896, 1902, 2162, 2142, 1911, 2204,
     7782, 1763, 1769, 1970, 1995, 2043, 2097, 2140, 2140, 2133,
     1855, 2179, 2183, 2189, 2216, 2221, 2222, 2223, 2235, 7782,
     1212, 7782, 2289, 2297, 1848, 3358, 2305, 3441, 3510, 1776,
     1743, 2318, 2338, 2199, 2324, 2202, 2345, 2327, 2333, 2346,
     2350, 2352, 2353, 2355, 2377, 2354, 2330, 2403,   53, 2408,
     2409, 2321, 2325, 2416, 1705, 2221, 2405, 2417, 2422, 2407,

      230, 2432, 2415, 2410, 2449, 2322, 2436, 2429, 1760, 1746,
     2441, 2480, 2482, 2491, 2489, 2522, 2524, 2537, 2496, 2520,
     2539, 2555, 2526, 2575, 2583, 2615, 1685, 2146, 7782, 1676,
     3593, 3677, 1670, 3761,    0, 1940, 7782,    0, 1943,    0,
     2684, 2453, 2370, 2686, 2688, 2715, 2711, 2729, 2722, 2734,
     2731,    0, 1977, 7782,    0, 1998, 2528, 2372, 2611, 2758,
     2795, 2807, 2634, 2805, 2813, 2818, 2636, 2838, 2822, 7782,
     1612,    0, 2172, 2577, 2018, 7782,    0, 2098,    0, 2773,
     2638, 2640, 2855, 2931, 2967, 2964, 2988, 3000, 7782, 1589,
        0, 2460, 2851, 2853, 7782, 1586,    0, 2649, 2857, 2752,

     2947, 1431, 1391, 1362, 2264, 1354, 2219, 2420, 2499, 2504,
      886,  939, 2732, 1043, 2982, 3004, 2976, 2986, 3069, 3083,
     7782, 2859, 2580, 2984, 2498,  213,  232,  800, 2949, 2966,
     2374, 2582,  884, 2500, 2756, 3012, 3033, 3139, 2579, 2679,
     2848, 3015, 2961, 2945, 3002,  506, 3037, 3142, 3051, 1257,
     3128, 3131, 3058, 3133, 3147, 3150, 3149, 3148, 3151, 7782,
     3161, 3158, 3196, 3182, 3152, 3154, 3198, 3186, 3214, 3223,
     3216, 2113, 3235, 3344, 3346, 3231, 2516, 2697, 3463, 3394,
     2828, 3392, 2917, 3465, 3456, 3406, 3488, 3119, 7782, 3304,
     3369, 3468, 3478, 3471, 3491, 3529, 3544, 3540, 3295, 3567,

     3552, 3349, 2174, 3542, 3554, 3184, 3211, 3561, 3572, 3625,
     3418, 3527, 3591, 3341, 3611, 3354, 2188, 3628, 2702, 1209,
     3627, 3660, 2853, 2791, 1192, 3252, 3245, 3626, 2260, 3691,
     3656, 3461, 3587, 3696, 3638, 3246, 2721, 3643, 3668, 3742,
     3336,  947, 3459, 3597, 3432, 3666, 1863, 3706, 3674, 3435,
     3434, 3660, 3759, 3774, 3676, 3758, 3772, 3238, 1098, 3765,
     3761, 1089, 3757, 3763, 3777, 3766, 2247, 3768, 3778, 3781,
     3774, 3783, 3792, 2291, 3811, 3816, 3803, 3808, 3831, 3821,
     3839, 3673,    0, 3858, 3856, 3866, 3874, 3877, 3314, 3739,
     3873, 3869, 3946, 3895, 3890, 3920, 3903, 3847, 3911, 3989,

     3943, 3960, 3845, 3940, 3965, 3973, 3977, 3498, 3967, 3970,
     3956, 2379, 3982, 3992, 2401, 3677, 1596, 3909, 3981, 4002,
     4005, 3992, 3993, 4018, 4054, 4064, 4026, 4072, 4026, 1111,
     4076, 4031, 4045, 1036, 1022,  982,  940, 4044, 4049, 4045,
     4062, 4129, 4060, 4056, 4071, 4075, 4079, 4073, 4099, 2443,
      937, 4098, 4055, 4152,  943, 1726, 4114, 4091, 4124, 4137,
      890, 4150, 4134, 4146, 2843, 4138, 4151, 2451, 4143, 4154,
     2553, 4156, 2668, 4161, 4159, 2670, 2763, 4162, 3726, 4174,
     4214, 4189, 4128, 4171, 4160, 4236, 4243, 4232, 4212, 4252,
     4269, 4254, 4264, 4349, 4297, 4258, 4221, 4234, 4312, 4262,

     4324, 4199, 4299, 4274, 4317, 4267, 4244, 1603, 7782, 4233,
     4295, 4329,  891, 4315, 4330,  837, 1642, 4371, 4372, 2903,
     4343, 4417, 7782, 4359, 4360, 1127, 4344, 4354, 4377, 4444,
     3118, 1372,  716, 1986, 4347, 4374, 1686, 4398,  700, 4400,
     3114, 7782, 4467, 4404, 4423, 4438, 4367, 4437, 4441, 4431,
     3490, 2809, 4446, 3034, 2820, 4445, 2826, 2994, 3030, 4454,
     4448, 4463, 4466, 4489, 4447, 4458, 4535, 4327, 4478, 4499,
     4482, 4570, 4523, 4525, 3181, 4495, 4580, 4551, 4558, 4556,
     4594, 4554, 4465, 4583, 4567, 4585, 4581, 4483, 4482, 7782,
     4575, 4600, 4581, 4595, 4582, 4643, 4655, 4615, 4598, 4675,

     4625, 4605, 4701, 4645, 3126,  675, 3814, 7782, 4721, 4698,
     4712, 4633, 4675, 4729, 4627, 4722, 4750, 4768, 4650, 4651,
      669,  745,  561, 4732, 4712, 4779, 1792, 4730, 4642, 4772,
     4748, 3201, 3734, 4806, 4750, 4767, 4762, 4785, 4838, 4803,
     4847, 4820, 3985, 4528, 4874, 4889, 4898, 7782, 4918, 4932,
     4908, 4945, 4746, 3311, 4929, 4910, 4811, 4943, 4896, 3316,
     4912, 4823, 4799, 4817, 4822, 4854,  613, 4923, 4970, 1801,
     4972, 4980, 7782, 2902, 4924, 5019, 4994, 4999, 5047, 5048,
     5063, 4924, 5080, 4933,  525, 5100, 4963, 2536, 4984, 4987,
     5026,  501, 2109, 5114, 5037, 5063, 4989, 5080, 5066, 5089,

     5006, 7782, 5125, 3729, 5128, 5005, 5070, 7782, 5074, 5092,
     5160, 5148, 4677, 7782, 5180, 5196, 5216, 5236, 5145, 5256,
     5276, 5189, 5083, 5140, 7782, 5298, 7782, 3333, 5165, 5301,
     7782, 5124, 5153, 5192, 5204, 5258, 5200, 5302, 5266, 5306,
     5237, 5249, 3986, 7782, 5328, 5241, 5263, 5260, 5271, 7782,
     7782, 5295, 4112, 7782, 5349, 5280, 5279, 5280, 5282, 5362,
     7782, 5376, 5292, 5291, 5285, 3337, 5293, 7782, 5372, 5330,
     5327, 4296, 5253, 5396, 7782, 5324, 4392, 5374, 5404, 5413,
     5386, 5454, 7782, 5400, 5370, 5408, 5403, 5417, 5416, 5415,
     5482, 5448, 5429, 5434, 5443, 5483, 5510, 5448, 5449, 5461,

     5477, 5475, 5530, 5544, 5486, 5474, 5475, 7782, 5559, 7782,
     5511, 5462, 5481, 5500, 5531, 5516, 5543, 7782, 5586, 5600,
     7782, 5611, 5625, 5645, 5556, 5648, 5543, 1999, 5549, 5563,
     5592, 5626, 5656, 5665, 5603, 5612, 5619, 7782, 7782, 5637,
      524, 5642, 5641, 5634, 5636, 7782, 5651, 5677, 5638, 5636,
     5648, 5637, 5644, 5681, 5676, 5646, 2087, 2101, 7782, 5657,
      504, 5664, 5667, 3272, 5727, 4318, 5659, 2663, 5673, 5689,
     2739, 5683, 5676, 5692, 5703, 5706, 5703, 5695, 7782, 5730,
     7782,  497, 5720, 7782, 3469, 7782, 5705, 5707, 5702, 5717,
     5757, 5789, 5715, 5750,  267, 5722, 3028, 3564, 3574, 5726,

     5732, 5728, 5739, 5777, 5743, 5745, 5784, 3811, 5767, 5770,
      238, 3865, 5762, 5770, 5780, 5785, 5783, 5813, 4187, 7782,
     4397, 7782, 3915, 5782, 5786, 5790, 5792, 5792, 5785, 5798,
     5807, 4564, 7782, 5802, 5791, 5829, 7782, 5801, 5809, 5815,
     5810, 5824, 5836, 5832, 5827, 5824, 5834, 7782, 5858, 5826,
     5835, 5848, 2922, 5834, 5853, 5857, 5857, 5842, 5888, 5863,
     5862, 5893, 5898, 5863,  206, 5870, 5927, 5868, 5868, 5864,
     5876, 5892, 5894, 5900, 5911, 5948, 5890,  193, 7782, 5908,
     5975, 5915, 5931, 5928, 5938, 7782, 5936, 5930, 5933, 5996,
     5938, 5964, 7782, 5962, 5966,  195, 5970, 5989, 5990, 5991,

     5961, 4869, 5982, 4872, 5993, 5983, 5985, 5999, 7782, 5989,
     5111, 7782, 5993, 5157, 7782,  173, 6003, 5438, 5990, 6005,
     5583, 5997, 6008, 5584, 7782, 6007, 6012, 5597, 7782, 6014,
     6000, 7782, 6002, 6019, 6014, 6028, 6014, 6020, 7782, 6027,
     6030, 6030,  151, 6033, 6076,  125, 6034, 6077, 6052, 6043,
       75, 6054, 6054,   19, 6036, 6056, 6057, 6043, 6065, 6064,
     5915, 6067, 6094, 7782, 6095, 6107, 7782, 7782, 6139, 6155,
     6171, 6187, 6203, 6219, 6235, 6251, 6267, 6283, 6299, 6315,
     6331, 6347, 6354, 6365, 6369, 6377, 6391, 6407, 6418, 6425,
     6429, 6442, 6451, 6455, 6466, 6473, 6477, 6488, 6492, 6508,

     6524, 6535, 6542, 6546, 6557, 6564, 6568, 6584, 6600, 6611,
     6618, 6622, 6638, 6654, 6665, 6672, 6676, 6692, 6708, 6724,
     6740, 6747, 6763, 6779, 6795, 6806, 6810, 6818, 6832, 6848,
     6864, 6880, 6896, 6907, 6918, 6922, 6929, 6933, 6940, 6953,
     6962, 6966, 6977, 6981, 6988, 6992, 6999, 7010, 7021, 7025,
     7041, 7057, 7073, 7089, 7100, 7104, 7111, 7115, 7122, 7133,
     7144, 7148, 7155, 7159, 7166, 7182, 7198, 7214, 7230, 7241,
     7245, 7252, 7256, 7263, 7279, 7295, 7311, 7327, 7338, 7342,
     7349, 7353, 7360, 7376, 7392, 7408, 7424, 7431, 7447, 7463,
     7474, 7482, 7496, 7512, 7528, 7539, 7543,  173, 7554, 1463,

     7565, 7569, 7580, 7596, 1832, 7607, 7618, 7622, 2535, 7633,
     7649, 2691, 7660, 7676, 3003, 7687, 7703, 7710, 7721, 7729,
     7740, 7749, 7765
    } ;

static const flex_int16_t yy_def[1624] =
    {   0,
     1469, 1469, 1470, 1470, 1468,    5, 1468,    7, 1471, 1471,
     1472, 1472, 1468,   13, 1473, 1473, 1474, 1474, 1475, 1475,
     1468,   21, 1476, 1476, 1468,   25, 1477, 1477, 1478, 1478,
     1479, 1479, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1480, 1468, 1468, 1468, 1468, 1481, 1482,
     1468, 1483, 1468, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1468, 1468, 1468, 1468,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,

     1484, 1484, 1485, 1484, 1468, 1468, 1486, 1486, 1486, 1468,
     1468, 1468, 1487, 1468, 1488, 1489, 1489, 1468, 1468, 1489,
     1490, 1468, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1491, 1489, 1468, 1468, 1492, 1468, 1468, 1468, 1468,
     1493, 1468, 1494, 1493, 1495, 1496, 1497, 1495, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499,
     1498, 1500, 1501, 1502, 1503, 1502, 1502, 1504, 1502, 1468,
     1468, 1468, 1505, 1505, 1468, 1506, 1468, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1507, 1505, 1508, 1509, 1510, 1511,
     1510, 1510, 1510, 1512, 1510, 1468, 1468, 1513, 1514, 1515,

     1516, 1468, 1515, 1515, 1515, 1515, 1515, 1517, 1515, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1518, 1519, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1468, 1520, 1521,
     1521, 1468, 1522, 1522, 1468, 1522, 1523, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1524, 1525, 1468, 1526, 1527, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,

     1526, 1526, 1468, 1528, 1528, 1528, 1468, 1468, 1529, 1530,
     1531, 1531, 1532, 1533,  312, 1534, 1535, 1536, 1534, 1534,
     1537, 1468, 1538, 1539, 1468, 1468, 1534, 1534, 1534, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1468, 1468,
     1540, 1468, 1468, 1541, 1542, 1541, 1543, 1544, 1543, 1545,
     1546, 1547, 1548, 1549, 1550, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1551, 1552,
     1553, 1553, 1554,  372, 1555, 1556, 1555, 1557, 1558, 1559,
     1555, 1555, 1468, 1468, 1560, 1561, 1562, 1560, 1560, 1563,
     1468, 1564, 1565, 1468, 1468, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1566, 1567, 1568, 1568, 1569,  408,
     1570, 1571, 1570, 1572, 1573, 1574, 1570, 1570, 1570, 1468,
     1575, 1576, 1577, 1577, 1578,  424, 1579, 1580, 1579, 1581,
     1582, 1583, 1468, 1468, 1579, 1579, 1579, 1579, 1579, 1579,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1468,
     1468, 1468, 1468, 1468, 1586, 1587, 1468, 1587,  468, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1590,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1592, 1592, 1468, 1593,
     1594, 1594, 1593, 1595,  532, 1596, 1468, 1597, 1596, 1598,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1600, 1601, 1468, 1602, 1601, 1468, 1603, 1468, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1468,
     1604, 1605, 1606, 1606, 1607, 1468, 1608, 1607, 1609, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1468, 1611,
     1612, 1613, 1613, 1613, 1468, 1614, 1615, 1616, 1616, 1616,

     1616, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1468, 1468,
     1468, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1468, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1468,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1468, 1468,
     1468, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1606, 1606, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1613, 1613, 1613, 1616, 1616, 1616, 1616, 1468, 1621,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1617, 1617, 1617,
     1617, 1618, 1618, 1468, 1618, 1618, 1618, 1618, 1618, 1468,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1468, 1618, 1618, 1618, 1468, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1620, 1620, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1468, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1606, 1610, 1610, 1610, 1610, 1610, 1468, 1613,
     1613, 1613, 1616, 1616, 1616, 1468, 1621, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1617, 1617, 1617, 1617, 1618, 1618,
     1468, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1468,
     1618, 1468, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1468, 1618, 1618, 1618, 1468, 1618, 1618,
     1618, 1618, 1618, 1618, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1620, 1599, 1599,
     1599, 1599, 1599, 1468, 1468, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1606, 1610, 1610, 1610,

     1610, 1468, 1613, 1613, 1616, 1616, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1617, 1617, 1617, 1617,
     1618, 1468, 1468, 1618, 1618, 1618, 1618, 1468, 1618, 1468,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1468, 1468, 1468, 1468, 1468, 1618, 1468, 1618, 1618, 1618,
     1618, 1618, 1468, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1620, 1599, 1599, 1599, 1468, 1468, 1603, 1603, 1603, 1603,
     1603,  894, 1603, 1603, 1468, 1603, 1468, 1603, 1603, 1606,
     1610, 1610, 1468, 1613, 1613, 1616, 1616, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1617, 1617, 1617, 1618, 1468,

     1618, 1618, 1468, 1618, 1468, 1618, 1468, 1468, 1468, 1468,
     1468, 1618, 1618, 1468, 1618, 1618, 1468, 1468, 1468, 1468,
     1618, 1468, 1618, 1618, 1618, 1468, 1618, 1618, 1468, 1468,
     1619, 1619, 1620, 1599, 1599, 1599, 1468, 1468,  894, 1603,
     1603, 1603, 1468, 1603, 1468, 1603, 1603, 1468, 1468, 1468,
     1603, 1603, 1603, 1606, 1610, 1610, 1468, 1613, 1613, 1616,
     1616, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1617, 1617,
     1617, 1618, 1468, 1618, 1618, 1468, 1618, 1468, 1468, 1468,
     1468, 1468, 1468, 1618, 1618, 1468, 1618, 1618, 1468, 1468,
     1468, 1618, 1618, 1468, 1468, 1618, 1468, 1468, 1619, 1468,

     1468, 1468, 1468, 1622, 1599, 1599, 1468, 1468, 1603, 1603,
      894, 1468, 1601, 1468, 1468, 1468,  894,  894, 1603,  894,
      894, 1468, 1607, 1610, 1468, 1468, 1468, 1613, 1616, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1617, 1617, 1468,
     1618, 1618, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1618, 1468, 1468, 1468, 1618, 1468, 1468, 1468, 1468,
     1468, 1468, 1618, 1468, 1468, 1619, 1468, 1468, 1599, 1468,
     1603, 1468, 1603, 1468, 1468, 1603, 1468, 1603, 1468, 1603,
     1603,  894, 1468, 1616, 1468, 1468, 1468, 1468, 1468, 1468,
     1617, 1617, 1468, 1618, 1618, 1468, 1468, 1468, 1468, 1468,

     1468, 1618, 1468, 1468, 1618, 1468, 1468, 1468, 1468, 1468,
     1618, 1468, 1468, 1468, 1468, 1468, 1603, 1468, 1468, 1468,
     1468, 1468, 1468,  894, 1603, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1617, 1617, 1468, 1618, 1618, 1468, 1468, 1468,
     1468, 1618, 1618, 1468, 1468, 1468, 1618, 1468, 1468, 1468,
     1468, 1468, 1468, 1603, 1603, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1617, 1617, 1468, 1618, 1618, 1468, 1468,
     1618, 1618, 1468, 1468, 1618, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1603, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1617, 1468, 1618, 1468, 1468, 1468, 1618, 1468, 1468, 1618,

     1468, 1468, 1468, 1468, 1468, 1468, 1603, 1468, 1468, 1468,
     1468, 1617, 1468, 1618, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1618, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1603, 1468, 1468, 1468, 1468, 1468, 1468, 1618, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1603, 1468,
     1468, 1468, 1618, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1603, 1468, 1623, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1603, 1468, 1623, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,  894,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,

     1603, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468,    0, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,

     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,

     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468
    } ;

static const flex_int16_t yy_nxt[7867] =
    {   0,
     1468,   35,   36,   37,   35,   88,   89,   90,   88,   88,
       89,   90,   88,  211,  212,  213,  214,  211,  212,  213,
      214,  216,  228,  227,  216,  216,  227,  219,  227,   38,
       39,   40,   41, 1456,  227,  221,  227,  227,   42,  222,
      230,  218,   43,  215,  224,  223,  225,  215,  216,   44,
      283,  216,  284,  216,  220,  236,  216,  219,  231,   38,
       39,   40,   41,  229,  233,  221,  227,  640,   42,  222,
      230,  218,   43,  215,  224,  223,  225,  215,  227,   44,
       35,   36,   37,   35,  220,  236,  232,  227,  231, 1453,
      265,  287,  288,  229,  233,  242,  242,  242,  242,  242,

      242,  242,  242,  251,  237,  287,  288,  234,   38,   39,
       40,   41,  248,  235,  256,  252,  232,   42,  249,  250,
      265,   43,  253,  254,  305,  244,  244,  255,   44, 1448,
      317,  325,  326,  251,  237,  244,  322,  234,   38,   39,
       40,   41,  248,  235,  256,  252,  244,   42,  249,  250,
      244,   43,  253,  254,  305, 1445,  244,  255,   44,   46,
       36,   37,   35,  244,  245,  246,  246,  246,  246,  246,
      246,  246,  246,   34,  260,  306,  257, 1422,  244,  261,
      279,  258,  540,   34,  259,  280,  540,   47,   48,   49,
       50,  345,  346,   51,  323,  324,   52,  318,  319, 1406,

       53,  340,  266,  267,  260,  306,  257,   54, 1379,  261,
      279,  258,  342,  317,  259,  280,  244,   47,   48,   49,
       50, 1379,  244,   51,  317,  262,   52,  737,  244,  263,
       53,  244,  266,  267,  651,  264,  720,   54,   46,   36,
       37,   35, 1336,  245,  246,  246,  246,  246,  246,  247,
      246,  246,   34,  270,  268,  262,  244,  271,  281,  263,
      345,  346,   34,  269,  276,  264,   47,   48,   49,   50,
      277, 1316,   51,  278,  282,   52,  244,  348,  349,   53,
      318,  319,  216,  270,  268,  216,   54,  271,  281,  351,
      352,  318,  319,  269,  276,  244,   47,   48,   49,   50,

      277,  244,   51,  278,  282,   52,  348,  349,  244,   53,
      244,  244,  244,  244,  244,  244,   54,   55,   56,   57,
       58,   56,   55,   59,   55,   60,   61,   55,   55,   55,
       55,   62,   63,   64,   64,   64,   64,   64,   65,   66,
       67,   55,   55,   55,   68,   69,   70,   71,   72,   73,
       62,   62,   74,   62,   62,   75,   62,   76,   77,   78,
       62,   79,   80,   81,   82,   83,   84,   85,   62,   62,
       55,   55,   55,   55,   68,   69,   70,   71,   72,   73,
       62,   62,   74,   62,   62,   75,   62,   76,   77,   78,
       62,   79,   80,   81,   82,   83,   84,   85,   62,   86,

       62,   87,   88,   89,   90,   88,   87,   87,   87,   91,
       91,   91,   87,   91,   87,   91,   87,   91,   91,   91,
       91,   91,   91,   91,   91,   87,   87,   87,   92,   91,
       93,   94,   95,   96,   91,   91,   97,   91,   91,   91,
       91,   91,   98,   99,   91,  100,  101,   91,  102,   91,
       91,   91,   91,   91,   87,   87,   87,   91,   92,   91,
       93,   94,   95,   96,   91,   91,   97,   91,   91,   91,
       91,   91,   98,   99,   91,  100,  101,   91,  102,   91,
       91,   91,   91,  103,  104,   87,   88,  105,  106,   88,
       87,   87,   87,   87,   87,   87,   87,  289,   87,  290,

       87, 1306,  291,  376,  377,  379,  380,  295, 1288,   87,
       87,   87,  301,  376,  377,  754,  108,  442,  245,  246,
      246,  246,  246,  246,  246,  247,  247,  289, 1270,  290,
      109,  391,  291,  287,  288,  394,  395,  295,   87,   87,
       87,   87,  301,  287,  288,  354,  108,  442,  245,  246,
      246,  246,  246,  246,  246,  246,  247,  292,  287,  288,
      109,  293,  443,  287,  288,  412,  413,   87,   87,   87,
       88,  105,  106,   88,   87,   87,   87,   87,   87,   87,
       87,  444,   87,  244,   87,  244,  294,  292,  244,  392,
      393,  293,  443,   87,   87,   87,  272,  296,  273,  299,

      108,  298,  274,  445,  297,  415,  416,  244,  287,  288,
      275,  444,  355,  356,  109,  244,  294, 1136,  287,  288,
      412,  413,   87,   87,   87,   87,  272,  296,  273,  299,
      108,  298,  274,  445,  297,  428,  429,  287,  288,  340,
      275,  287,  288,  244,  109,  216,  287,  288,  216,  244,
      342,   87,   87,   87,   88,  110,  111,   88,  112,  113,
      114,  115,  116,  116,  114,  117,  118,  117,  119,  120,
      120,  120,  120,  120,  120,  120,  120,  121,  122,  112,
      120,  120,  123,  120,  124,  125,  120,  120,  126,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  127,  128,

      129,  120,  130,  120,  120,  120,  119,   87,  114,  131,
      120,  120,  123,  120,  124,  125,  120,  120,  126,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  127,  128,
      129,  120,  130,  120,  120,  132,  133,   87,   88,  134,
      135,   88,   87,   87,   87,   87,   87,   87,   87, 1091,
       87,  244,   87,  300,  431,  432,  302,  244,  308,  381,
      308,   87,   87,   87,  308,  308,  308,  308,  308,  419,
      446,  317,  308,  308,  354,  308,  354,  433,  434,  308,
      428,  429,  244,  300,  447,  317,  302,  308,  368,  381,
       87,   87,   87,   87,  287,  288,  287,  288,  244,  419,

      446,  376,  377,  327,  721,  448,  412,  413,  308,  308,
      328,  317,  216,  386,  447,  216,  308,  308,  368,   87,
       87,   87,   88,  134,  135,   88,   87,   87,   87,   87,
       87,   87,   87,  327,   87,  448,   87,  335,  318,  319,
      328,  355,  356,  355,  356,   87,   87,   87,  308,  227,
      308,  995,  318,  319,  308,  320,  216,  320,  317,  216,
      354,  287,  288,  287,  288,  317,  449,  335,  317,  308,
      450,  354,  455,  317,   87,   87,   87,   87,  318,  319,
      387,  388,  244,  331,  317,  333,  340,  360,  723,  334,
      720,  329,  365,  332,  330,  992,  449,  342,  308,  320,

      450,  227,  455,   87,   87,  137,  138,  139,  140,  138,
      137,  137,  137,  331,  336,  333,  137,  360,  137,  334,
      142,  329,  365,  332,  330,  318,  319,  355,  356,  137,
      137,  137,  318,  319,  228,  318,  319,  216,  355,  356,
      318,  319,  354,  721,  336,  287,  288,  944,  227,  317,
      227,  318,  319,  354,  227,  308,  842,  308,  137,  137,
      137,  308,  320,  386,  320,  317,  244,  361,  337,  338,
      323,  324,  244,  358,  323,  324,  308,  452,  354,  357,
      357,  357,  357,  357,  357,  357,  357,  143,  144,  137,
      138,  139,  140,  138,  137,  137,  137,  361,  337,  338,

      137,  354,  137,  358,  142,  308,  320,  452,  504,  355,
      356,  382,  227,  137,  137,  137,  318,  319,  417,  244,
      355,  356,  244,  386,  362,  244,  457,  354,  227,  244,
      387,  388,  318,  319,  354,  403,  345,  346,  504,  354,
      227,  382,  137,  137,  137,  355,  356,  723,  417,  376,
      377,  366,  363,  359,  362,  367,  457,  364,  227,  453,
      412,  413,  244,  438,  244,  403,  458,  386,  355,  356,
      418,  143,  144,   87,   88,   89,   90,   88,   87,   87,
       87,  366,  363,  359,   87,  367,   87,  364,   87,  453,
      387,  388,  397,  438,  355,  356,  458,  146,   87,   87,

      418,  355,  356,  384,  244,  384,  355,  356,  437,  384,
      384,  483,  384,  412,  413,  428,  429,  386,  244,  386,
      922,  386,  397,  384,  384,  384,   87,   87,   87,  384,
      389,  317,  389,  386,  387,  388, 1003,  317,  437,  345,
      346,  483,  348,  349,  384,  398,  400,  386,  399,  396,
      428,  429,  244,  384,  384,  147,  148,   87,   88,   89,
       90,   88,   87,   87,   87,  435,  436,  404,   87,  227,
       87,  244,   87,  384,  389,  398,  400,  439,  399,  396,
      244,  146,   87,   87,  387,  388,  387,  388,  387,  388,
      440,  491,  227,  244,  456,  435,  436,  404,  318,  319,

      387,  388,  428,  429,  318,  319,  822,  439,  454,  244,
       87,   87,   87,  720,  387,  388,  461,  461,  428,  429,
      440,  491,  462,  462,  456,  463,  463,  428,  429,  242,
      242,  242,  242,  242,  242,  242,  242,  244,  454,  147,
      148,   87,   88,   89,   90,   88,   87,   87,   87,  149,
      150,  149,   87,  149,   87,  149,   87,  149,  149,  149,
      149,  149,  149,  149,  149,   87,   87,   87,  149,  151,
      152,  153,  154,  155,  149,  149,  156,  149,  149,  149,
      149,  157,  149,  149,  149,  158,  149,  149,  149,  159,
      149,  149,  149,  149,   87,   87,   87,  149,  149,  151,

      152,  153,  154,  155,  149,  149,  156,  149,  149,  149,
      149,  157,  149,  149,  149,  158,  149,  149,  149,  159,
      149,  149,  149,  160,  161,   87,   88,   89,   90,   88,
       87,  162,   87,  163,  227,  472,   87,  386,   87,  244,
       87,  464,  464,  464,  464,  464,  464,  464,  464,  165,
       87,   87,  470,  401,  477,  471,  166,  167,  723,  473,
      348,  349,  494,  459,  474,  472,  721,  527,  402,  245,
      246,  246,  246,  246,  246,  246,  246,  246,   87,   87,
       87, 1011,  470,  401,  477,  471,  166,  167,  244,  473,
      244,  486,  494,  459,  474,  720,  244,  527,  402,  475,

      482,  244,  476,  244,  387,  388,  244,  168,  169,   87,
       88,   89,   90,   88,   87,  162,   87,  163,  487,  244,
       87,  486,   87,  484,   87,  478,  495,  488,  480,  475,
      482,  490,  476,  165,   87,   87,  244,  492,  479,  485,
      166,  167,  244,  481,  244,  719,  244,  489,  487,  351,
      352,  498,  528,  484,  244,  478,  495,  488,  480,  244,
      244,  490,   87,   87,   87,  351,  352,  492,  479,  485,
      166,  167,  552,  481,  244,  244,  552,  489,  244,  244,
      244,  498,  528,  376,  377,  376,  377,  379,  380,  244,
      244,  168,  169,   87,   88,  170,  171,   88,  172,   87,

      172,  173,  173,  173,  172,  174,  175,  174,   87,  173,
      173,  173,  173,  173,  173,  173,  173,  176,  177,  172,
      173,  173,  178,  173,  179,  180,  173,  173,  181,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  182,  183,
      173,  173,  184,  173,  173,  173,   87,   87,  172,  174,
      173,  173,  178,  173,  179,  180,  173,  173,  181,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  182,  183,
      173,  173,  184,  173,  173,  185,  186,   87,   88,   89,
       90,   88,   87,  187,   87,  188,  493,  499,   87,  496,
       87,  500,   87,  501,  596,  503,  505,  590,  502,  506,

      908,  190,   87,   87,  497,  507,  511,  908,  191,  379,
      380,  909,  192,  392,  393,  508,  493,  499,  909,  496,
      571,  500,  537,  501,  193,  503,  505,  244,  502,  506,
       87,   87,   87,  317,  497,  507,  511,  244,  191,  244,
      244,  244,  192,  244,  244,  508,  992,  287,  288,  514,
      244,  244,  516,  244,  193,  392,  393,  227,  515,  194,
      195,   87,   88,   89,   90,   88,   87,  187,   87,  188,
      412,  413,   87,  317,   87,  519,   87,  517,  530,  514,
      512,  513,  516,  518,  530,  190,   87,   87,  515,  287,
      288,  524,  191,  538,  539, 1014,  192,  412,  413,  677,

      318,  319,  287,  288,  546,  519,  317,  517,  193,  520,
      512,  513,  526,  518,   87,   87,   87,  287,  288,  287,
      288,  524,  191,  287,  288,  521,  192,  522,  287,  288,
      945,  523,  415,  416,  546,  287,  288,  551,  193,  520,
      318,  319,  526,  194,  195,   87,   88,  196,  197,   88,
       87,  198,   87,  199,  660,  521,   87,  522,   87,  525,
       87,  523,  287,  288,  287,  288,  660,  551,  244,  201,
      202,   87,  203,  318,  319,  554,  204,  574,  287,  288,
      205,  317,  287,  288,  317,  415,  416,  244,  308,  525,
      308,  206,  207,  602,  308,  308,  542,  308,   87,   87,

       87, 1095,  203,  287,  288, 1136,  204,  574,  244,  308,
      205,  428,  429,  541,  428,  429,  227,  576,  376,  377,
      603,  206,  207,  602,  317,  244,  542,  208,  209,   87,
       88,  196,  197,   88,   87,  198,   87,  199,  308,  308,
       87,  572,   87,  541,   87,  572,  555,  556,  318,  319,
      603,  318,  319,  201,  202,   87,  203,  547,  244,  308,
      204,  308,  317,  621,  205,  308,  320,  317,  320,  317,
      227,  317,  433,  317,  244,  206,  207,  847,  545,  317,
      308,  354,   87,   87,   87,  596,  203,  547,  577,  578,
      204,  318,  319,  549,  205,  595,  543,  544,  317,  431,

      432,  590,  548,  431,  432,  206,  207,  354,  545,  308,
      320,  208,  209, 1468,  550, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468,  549,  354,  243,  543,  544,  354,  318,
      319,  354,  548,  354,  318,  319,  318,  319,  318,  319,
      318,  319,  562,  561,  550,  244,  318,  319,  355,  356,
      354,  589,  243,  243,  243,  243,  310,  310,  560,  310,
      310,  310,  310,  310,  311,  318,  319,  310,  354,  310,
      394,  313,  562,  561,  355,  356,  564,  573,  428,  429,
      310,  310,  310,  563,  428,  429,  594,  571,  560,  354,
      992,  355,  356,  428,  429,  355,  356,  604,  355,  356,

      355,  356,  386, 1258,  354,  570,  564,  573,  354,  310,
      310,  310,  325,  563, 1259,  354,  594,  355,  356,  354,
      565,  386,  538,  539,  605,  538,  539,  604,  566,  376,
      377,  568,  592,  412,  413,  355,  356,  569,  314,  315,
      370,  370,  386,  370,  370,  370,  370,  370,  371,  567,
      565,  370,  386,  370,  605,  370,  355,  356,  566,  555,
      556,  568,  592,  530,  370,  370,  370,  569,  244,  387,
      388,  355,  356,  584,  606,  355,  356,  386,  583,  567,
      555,  556,  355,  356,  412,  413,  355,  356,  387,  388,
      384, 1285,  384,  370,  370,  370,  384,  384,  386,  384,

      577,  578, 1286,  584,  606, 1258,  580,  529,  583,  387,
      388,  384,  593,  581,  244,  386, 1259,  386, 1160,  387,
      388,  386,  373,  374,  406,  406,  244,  406,  406,  406,
      406,  406,  407,  586,  607,  406,  580,  406,  585,  406,
      384,  384,  593,  581,  387,  388,  582,  244,  406,  406,
      406,  384,  244,  384,  241,  412,  413,  384,  389,  386,
      389,  386,  241,  586,  607,  387,  388,  608,  585,  609,
      610,  460,  384,  599,  386,  678,  582,  406,  406,  406,
      577,  578,  387,  388,  387,  388,  702,  587,  387,  388,
      588,  244,  598,  227,  227,  287,  288,  608,  227,  609,

      610,  384,  389,  599,  227,  678,  409,  410,  422,  422,
      612,  422,  422,  422,  422,  422,  423,  587,  613,  422,
      588,  422,  598,  422,  428,  429,  387,  388,  387,  388,
      611,  227,  422,  422,  422,  600,  227,  227,  227,  601,
      612,  387,  388,  624,  428,  429,  724,  614,  613,  616,
      227,  227,  617,  627,  376,  377,  376,  377,  615,  646,
      611,  422,  422,  422, 1468,  600,  722,  722,  722,  601,
      428,  429,  618,  624,  826,  227,  724,  614,  441,  616,
      420,  244,  617,  627,  244,  383,  428,  429,  615,  646,
      425,  426, 1468,  619, 1468, 1468, 1468, 1468, 1468, 1468,

     1468, 1468,  618,  244,  243,  620,  620,  620,  620,  620,
      620,  620,  620,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  287,
      288,  243,  243,  243,  243,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  622,
      467,  468,  468,  468,  468,  468,  468,  468,  468,  465,
      465,  465,  629,  625,  630,  623,  626,  638,  643,  656,
      343,  644,  628,  287,  288,  631,  722,  722,  740,  622,
      634,  632,  339,  633,  637,  317,  635,  354,  465,  465,
      465,  465,  629,  625,  630,  623,  626,  638,  643,  656,

      244,  644,  628,  244,  244,  631,  244,  244,  636,  244,
      634,  632,  244,  633,  637,  244,  635,  469,  310,  310,
      244,  310,  310,  310,  310,  310,  311,  244,  244,  310,
      639,  310,  244,  313,  244,  244,  244,  244,  636,  641,
      642,  307,  310,  310,  310,  645,  647,  650,  648,  649,
      653,  654,  318,  319,  355,  356,  244,  938,  725,  244,
      639,  412,  413,  652,  657,  658,  659,  680,  317,  641,
      642,  310,  310,  310,  712,  645,  647,  650,  648,  649,
      653,  654,  655,  428,  429,  244,  661,  244,  725,  244,
      244,  244,  244,  652,  657,  658,  659,  244,  244,  244,

      314,  315,  310,  310,  244,  310,  310,  310,  310,  310,
      311,  244,  655,  310,  244,  310,  661,  313,  244,  662,
      665,  303,  663,  287,  288,  244,  310,  310,  310,  664,
      726,  244,  557,  287,  288,  318,  319,  669,  689,  727,
     1136,  559,  412,  413,  579,  736,  742,  782,  579,  662,
      665,  666,  663,  667,  285,  310,  310,  310,  670,  664,
      726,  244,  287,  288,  287,  288,  668,  669,  673,  727,
      671,  287,  288,  287,  288,  736,  742,  782,  287,  288,
      244,  666,  244,  667,  314,  315,  310,  310,  670,  310,
      310,  310,  310,  310,  531,  672,  668,  533,  673,  310,

      671,  310,  287,  288,  287,  288,  287,  288,  287,  288,
      310,  310,  310,  674,  675,  690,  703,  747,  244,  287,
      288,  287,  288,  241,  733,  672,  741,  691,  691,  691,
      691,  691,  691,  691,  691,  287,  288,  287,  288,  310,
      310,  310,  676,  674,  675,  238,  703,  747,  695,  354,
      227,  354,  705,  386,  733,  386,  741,  287,  288,  376,
      377,  244,  244,  715,  244,  287,  288, 1294,  534,  535,
      310,  310,  676,  310,  310,  310,  310,  310,  530,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  557,  287,  288,  317,

      591,  317,  558,  317,  591,  559,  217,  354,  357,  357,
      357,  357,  357,  357,  357,  357,  355,  356,  355,  356,
      387,  388,  387,  388,  783,  681,  317,  748,  682,  679,
      317,  428,  429,  816,  722,  722,  722,  317,  834,  835,
      836,  837,  684, 1288,  317,  244,  317,  227, 1468,  317,
      287,  288,  287,  288,  783,  681,  683,  748,  682,  679,
      685,  244,  686,  816, 1468,  688,  318,  319,  318,  319,
      318,  319,  684,  354,  355,  356,  370,  370,  687,  370,
      370,  370,  370,  370,  371,  692,  683,  370,  386,  370,
      685,  370,  686,  318,  319,  688,  717,  318,  319, 1468,

      370,  370,  370,  244,  318,  319,  743, 1468,  687, 1468,
      354,  318,  319,  318,  319,  692,  318,  319,  704, 1468,
      354,  244,  354, 1028,  821, 1468,  717, 1468,  354,  370,
      370,  370,  696,  354,  428,  429,  743,  354,  244,  693,
      355,  356,  694,  317,  697,  287,  288,  953,  704,  698,
      700,  701, 1468,  354,  821,  387,  388,  723,  373,  374,
      370,  370,  696,  370,  370,  370,  370,  370,  371,  693,
      386,  370,  694,  370,  697,  370,  699,  355,  356,  698,
      700,  701,  713, 1468,  370,  370,  370,  355,  356,  355,
      356,  244,  749,  714,  706,  355,  356,  716,  820,  732,

      355,  356,  287,  288,  355,  356,  699, 1468,  287,  288,
      318,  319,  713,  370,  370,  370, 1141,  998,  227, 1468,
      355,  356,  749,  714,  706,  287,  288,  716,  820,  732,
      244, 1367,  317,  412,  413,  412,  413,  387,  388,  428,
      429,  244,  373,  374,  370,  370,  386,  370,  370,  370,
      370,  370,  571,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      406,  406,  707,  406,  406,  406,  406,  406,  407,  386,
     1468,  406,  386,  406,  244,  406, 1468,  718,  738, 1468,
     1468,  227,  752,  734,  406,  406,  406,  227,  708,  318,

      319,  227,  707,  386,  244,  751,  739,  730, 1468,  728,
      709,  735,  597,  387,  388,  386,  597,  718,  738,  227,
     1468,  731,  752,  406,  406,  406,  710,  244,  708,  428,
      429,  244, 1318,  753,  711,  751,  739,  730, 1030,  728,
      709,  735,  729,  244,  750,  744,  387,  388,  244,  387,
      388,  731,  409,  410,  406,  406,  710,  406,  406,  406,
      406,  406,  407,  753,  711,  406,  244,  406,  745,  406,
      387,  388,  729,  619,  750,  744,  287,  288,  406,  406,
      406,  755,  387,  388,  244,  620,  620,  620,  620,  620,
      620,  620,  620,  462,  244,  757,  760,  244,  745,  620,

      620,  620,  620,  620,  620,  620,  620,  406,  406,  406,
      244,  755,  287,  288, 1468,  244,  287,  288,  941,  244,
     1010, 1010, 1010,  791,  942,  757,  760,  943, 1078, 1078,
     1079, 1468,  651,  244,  317, 1468,  409,  410,  406,  406,
      244,  406,  406,  406,  406,  406,  590,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  422,  422,  746,  422,  422,  422,
      422,  422,  423,  756,  758,  422,  759,  422,  762,  422,
      761,  763,  765, 1468,  764,  975,  766, 1468,  422,  422,
      422, 1048,  767,  768,  977,  772,  746, 1468,  771,  386,

      244,  318,  319,  756,  758, 1100,  759, 1468,  762,  770,
      761,  763,  765,  244,  764,  244,  766,  422,  422,  422,
      774,  244,  767,  768,  244,  772,  386,  769,  771,  244,
      244,  244,  244,  244,  287,  288,  287,  288, 1468,  770,
      287,  288, 1468,  287,  288,  773,  425,  426,  422,  422,
      774,  422,  422,  422,  422,  422,  423,  769,  775,  422,
      777,  422,  778,  422,  287,  288,  387,  388,  287,  288,
      776, 1468,  422,  422,  422,  773, 1288,  781,  287,  288,
      287,  288,  823,  287,  288,  824,  833,  227,  775,  858,
      777, 1468,  778,  387,  388, 1468,  287,  288,  287,  288,

      776,  422,  422,  422,  800,  287,  288,  781,  690, 1468,
      354, 1468,  823,  287,  288,  824,  833,  287,  288,  858,
      691,  691,  691,  691,  691,  691,  691,  691,  244,  317,
      425,  426,  422,  422, 1468,  422,  422,  422,  422,  422,
      596,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  779,  621,  812,  780,  841,  355,  356,  689,
      803, 1468,  465,  465,  465,  691,  691,  691,  691,  691,
      691,  691,  691,  376,  377, 1468,  318,  319,  428,  429,

      814, 1468,  779, 1468,  812,  780,  841,  317, 1468,  317,
      803,  465,  465,  465,  465,  412,  413, 1468,  244,  287,
      288,  317,  809,  412,  413,  785,  287,  288,  287,  288,
      814,  376,  377,  386, 1468, 1468,  428,  429,  786,  789,
      469,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  785,  467,  468,  468,  468,
      468,  468,  468,  468,  468,  465,  465,  465,  786,  789,
     1468,  317,  845, 1285,  318,  319,  318,  319,  317,  851,
      317,  850, 1468,  354, 1286,  788,  354,  793,  318,  319,
      843,  829, 1468,  354,  465,  465,  465,  465, 1468, 1026,

      387,  388,  845,  317,  784,  794,  354,  787, 1027,  851,
      795,  850,  792,  386,  244,  788,  244,  244, 1468,  790,
      843,  829,  796,  469,  465,  621,  465,  465,  465,  465,
      465,  465,  465,  465,  784,  794,  466,  787,  318,  319,
      795,  244,  792,  244,  354,  318,  319,  318,  319,  790,
      355,  356,  796,  355,  356,  354, 1468,  386,  810,  354,
      355,  356, 1468,  466,  466,  466,  466,  354, 1319,  386,
      318,  319,  244,  355,  356,  797,  386,  798, 1321, 1320,
      387,  388,  354,  804,  799,  805,  802,  386,  810, 1322,
      806, 1468,  466,  310,  310, 1468,  310,  310,  310,  310,

      310,  531,  801,  807,  310,  797,  310,  798,  310,  412,
      413,  355,  356,  804,  799,  805,  802,  310,  310,  310,
      806,  811,  355,  356,  387,  388,  355,  356,  844, 1468,
     1468,  721,  801,  807,  355,  356,  387,  388,  830, 1468,
      386,  227,  813,  387,  388, 1468,  310,  310,  310,  355,
      356,  811, 1468, 1468,  387,  388,  808,  818,  844,  825,
     1468,  815,  722,  722,  722, 1468, 1468,  832,  830,  244,
      838,  227,  813,  412,  413,  534,  535,  310,  310,  244,
      310,  310,  310,  310,  310,  531,  808,  818,  310,  825,
      310,  815,  310,  428,  429, 1468,  828,  832,  839,  846,

      838,  310,  310,  310,  852,  819,  227,  387,  388,  849,
      428,  429,  831,  831,  831,  831,  831,  831,  831,  831,
      244,  827,  855,  878, 1468,  244,  828,  907,  839,  846,
      310,  310,  310,  848,  852,  819, 1101, 1101, 1101,  849,
      537,  317,  244,  884,  722,  722,  740, 1468,  244, 1102,
      244,  827,  855,  878,  317, 1468,  244,  907,  244,  534,
      535,  310,  310,  848,  310,  310,  310,  310,  310,  530,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  840,  244,  853,
      854,  854,  854,  854,  854,  854,  854,  854,  856,  857,

      859,  860,  861,  862,  863,  868,  864,  866,  318,  319,
     1468,  538,  539, 1468,  865, 1332, 1468,  840, 1007,  853,
     1468,  318,  319,  869, 1008,  867, 1333, 1009,  856,  857,
      859,  860,  861,  862,  863,  868,  864,  866,  870,  244,
      244,  244,  871,  244,  865,  244,  872,  244,  244,  873,
      287,  288,  874,  869,  244,  867,  287,  288,  875,  244,
      287,  288,  354,  287,  288,  287,  288,  876,  870, 1336,
      877,  317,  871,  317,  287,  288,  872,  791,  892,  873,
      227,  317,  874, 1468,  354,  287,  288, 1468,  875,  317,
      287,  288,  317,  287,  288,  897, 1468,  876,  287,  288,

      877,  881,  879,  287,  288,  354,  880,  885,  892, 1468,
      354, 1468,  891,  287,  288,  882, 1468,  889,  354, 1336,
      886,  287,  288,  883,  888,  897,  354,  376,  377,  355,
      356,  881,  879, 1468, 1468,  354,  880,  885,  318,  319,
      318,  319, 1468, 1468,  910,  882,  893,  889,  318,  319,
      886,  355,  356,  883,  888,  386,  318,  319,  354,  318,
      319,  354,  887,  887,  887,  887,  887,  887,  887,  887,
      890,  809,  355,  356,  910,  354,  893,  355,  356, 1468,
      386, 1468, 1468,  895,  898,  355,  356,  896,  386, 1043,
     1143,  904,  386,  355,  356, 1114, 1144,  244, 1045, 1145,

      890,  902,  355,  356,  354,  894,  894,  894,  894,  894,
      894,  894,  894,  895,  898,  899,  901,  896, 1468,  900,
      903,  904,  387,  388,  911,  355,  356,  906,  355,  356,
     1468,  902,  905,  912, 1468, 1468,  913,  914,  412,  413,
      915,  227,  355,  356, 1468,  899,  901,  387,  388,  900,
      903,  916,  412,  413,  911,  387,  388,  906, 1468,  387,
      388,  921,  905,  912,  428,  429,  913,  914, 1468,  227,
      915,  355,  356,  919,  428,  429, 1468,  924, 1468,  227,
      925,  916,  926, 1468,  927,  917,  923,  227,  928,  929,
      931,  921,  831,  831,  831,  831,  831,  831,  831,  831,

      932, 1468,  940,  919,  933,  920,  934,  924,  244,  918,
      925,  936,  926,  244,  927,  917, 1153, 1468,  928,  929,
      931, 1468, 1154, 1468,  935, 1155,  244,  244,  937,  939,
      932,  244,  940,  947,  933,  920,  934,  244,  244,  918,
     1468,  936,  244,  317,  244,  930,  930,  930,  930,  930,
      930,  930,  930,  244,  935,  244,  941,  244,  937,  939,
      946,  244,  942,  947,  948,  943, 1468,  949,  854,  854,
      854,  854,  854,  854,  854,  854, 1468,  950,  951,  952,
      244,  244,  955,  956,  954,  957, 1468,  958,  960,  317,
      946, 1319,  959,  961,  948, 1468,  244,  949, 1468, 1468,

      965,  966, 1320, 1468,  317,  962,  244,  950,  951,  952,
      318,  319,  955,  956,  954,  957,  244,  958,  960,  244,
      287,  288,  959,  961,  964,  287,  288,  354,  244,  317,
      965,  966,  244,  287,  288,  962,  287,  288,  287,  288,
      983,  287,  288,  287,  288,  967,  963,  354, 1468,  386,
      970,  354,  980,  968,  964, 1468,  318,  319,  354,  887,
      887,  887,  887,  887,  887,  887,  887,  354, 1468,  354,
      983,  318,  319,  354, 1468,  988,  963,  386,  969,  354,
      970,  989,  980,  971,  354,  972,  972,  972,  972,  972,
      972,  972,  972,  974,  355,  356,  318,  319,  973,  987,

     1172,  985,  979,  376,  377,  988, 1218, 1468,  969, 1174,
     1468,  989,  354,  971,  355,  356,  387,  388,  355,  356,
     1292, 1292, 1292,  974,  978,  355,  356,  386,  973,  987,
      984,  985,  979,  990,  355,  356,  355,  356, 1468,  386,
      355,  356,  354,  981,  387,  388,  355,  356,  986,  428,
      429,  355,  356,  975,  978,  982,  412,  413,  991,  976,
      984,  993,  977,  990,  354,  894,  894,  894,  894,  894,
      894,  894,  894,  981,  994, 1468, 1468, 1468,  986,  355,
      356,  412,  413,  999, 1004,  982,  227,  227,  991, 1002,
     1001,  993, 1005, 1012,  387,  388, 1177, 1468, 1022,  428,

      429, 1321, 1221, 1468,  994, 1179,  387,  388,  944,  355,
      356, 1468, 1322,  999, 1004, 1006,  997,  996, 1468, 1002,
     1001, 1013, 1005, 1012, 1468,  244,  244,  945, 1022,  244,
     1468,  355,  356, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  244,  244, 1015, 1016, 1006,  997,  996, 1007, 1019,
      953, 1013, 1468, 1468, 1008, 1468,  244, 1009, 1468,  244,
      930,  930,  930,  930,  930,  930,  930,  930, 1020, 1021,
     1023, 1017, 1024, 1015, 1016, 1025, 1031, 1033,  317, 1019,
      244,  317,  244, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1032, 1034,  354, 1037, 1029, 1038,  354, 1020, 1021,

     1023, 1035, 1024, 1057,  317, 1025, 1031, 1033, 1041, 1040,
      354, 1042, 1062,  244,  354, 1468, 1468, 1063, 1468,  244,
      244, 1032, 1034,  244, 1037, 1029, 1038,  287,  288, 1036,
     1468, 1035, 1046, 1057, 1047, 1468,  287,  288,  354, 1040,
      354, 1042, 1062,  354, 1468,  318,  319, 1063,  318,  319,
      354, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1036,
      355,  356, 1468, 1468,  355,  356,  354, 1052, 1332,  386,
     1468,  318,  319,  354, 1043, 1468, 1053,  355,  356, 1333,
     1044,  355,  356, 1045, 1049, 1054,  972,  972,  972,  972,
      972,  972,  972,  972, 1056, 1051, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1050,  992,  355,  356,  355,  356,  386,
      355,  356, 1058, 1059, 1060, 1054, 1061,  355,  356, 1468,
     1468, 1064, 1066, 1055, 1056, 1051, 1067, 1068, 1468, 1468,
      227, 1072, 1075,  355,  356, 1468,  387,  388,  376,  377,
      355,  356, 1058, 1059, 1060, 1065, 1061, 1468, 1468,  412,
      413, 1064, 1066, 1055, 1468, 1468, 1067, 1068,  227, 1468,
     1071, 1072, 1075,  428,  429,  412,  413,  428,  429, 1074,
      227, 1468, 1468, 1087, 1084, 1065,  387,  388, 1077, 1468,
      244, 1089, 1090, 1097, 1069, 1073, 1070,  244,  554, 1468,
     1071, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1074,

     1010, 1010, 1010, 1087, 1084, 1468, 1085,  244, 1077,  244,
     1468, 1089, 1090, 1097, 1069,  244, 1070, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1080, 1082,  244, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1085, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1088, 1017, 1121, 1082,  244, 1468,  555,
      556,  354, 1092, 1093, 1468,  317, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1468, 1096, 1030, 1099,  942, 1468,
     1468, 1105,  317, 1088, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1092, 1093,  244, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1468,  244, 1096, 1107, 1099, 1103, 1103,
     1103, 1105,  244, 1106,  244, 1108, 1098, 1468,  354, 1468,
     1468, 1104, 1112, 1112, 1112, 1130, 1130, 1130,  355,  356,
      287,  288,  318,  319, 1468, 1113, 1107, 1468, 1131, 1468,
     1468, 1125, 1468, 1106, 1132, 1108, 1098, 1110, 1109,  318,
      319, 1468, 1133, 1134, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039,  354, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1125, 1468, 1411, 1132, 1468, 1414, 1110, 1115, 1468,
     1468, 1468, 1133, 1134, 1412,  355,  356, 1415,  318,  319,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1135, 1468,

     1468, 1468,  355,  356,  354, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117,  354, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1049,  354, 1468,  386, 1468, 1128, 1135,  355,
      356, 1122, 1122, 1122, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1048, 1129, 1123, 1126, 1126, 1126, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1124, 1128, 1127, 1119,
      354, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1137,
     1142,  355,  356, 1129, 1468, 1150, 1468, 1152,  412,  413,
      355,  356, 1140, 1140, 1140,  227, 1124,  227, 1468, 1119,
      355,  356,  387,  388,  428,  429, 1146, 1146, 1146, 1137,

     1142, 1078, 1078, 1078, 1156, 1150,  244, 1152, 1101, 1101,
     1101,  387,  388, 1157, 1138,  244, 1158, 1468, 1139, 1468,
      317, 1102, 1468, 1143, 1468,  412,  413,  355,  356, 1144,
     1091, 1468, 1145, 1164, 1156, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1157, 1138,  244, 1158, 1147, 1139, 1078,
     1078, 1079, 1080, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1159,  244, 1164, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1468, 1008, 1468, 1148,  244, 1147, 1149, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081,  318,  319,  354,
     1151, 1159, 1468, 1100,  576, 1147, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1153, 1148, 1171,  354, 1149, 1163,
     1154, 1165, 1166, 1155, 1170, 1411, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1161, 1147, 1412, 1103, 1103, 1103,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1167, 1163,
     1168, 1165, 1166,  317, 1170,  244, 1468, 1468,  287,  288,
     1112, 1112, 1112, 1468, 1180,  386,  355,  356, 1169, 1185,
      354, 1414, 1468, 1175, 1172,  577,  578, 1468, 1167, 1468,
     1173, 1468, 1415, 1174,  355,  356, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1115, 1468, 1468, 1468, 1169, 1185,
     1468, 1122, 1122, 1122, 1186, 1184, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1183, 1468, 1114, 1468, 1468, 1468,
      318,  319, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1468, 1187,  387,  388, 1186, 1184, 1176,  355,  356, 1468,
     1468, 1188, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1177, 1190, 1468, 1146, 1146, 1146, 1178,  428,  429, 1179,
     1468, 1187, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1468, 1188, 1136, 1468, 1468, 1468, 1181, 1468,  354, 1468,
     1468, 1190, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1468,  227, 1198, 1468, 1195, 1194,  353, 1468, 1189, 1468,
     1199, 1200, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,

     1126, 1126, 1126, 1130, 1130, 1130, 1468, 1192, 1140, 1140,
     1140, 1201, 1198, 1127, 1195, 1194, 1131,  227, 1189,  244,
     1199, 1200, 1202, 1468, 1205, 1206, 1207, 1208, 1212, 1191,
     1213,  244, 1196, 1211, 1214,  355,  356, 1192, 1468,  354,
     1468, 1201,  354, 1193, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1202, 1203, 1205, 1206, 1207, 1208, 1212, 1191,
     1213, 1216,  244, 1211, 1214, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1193,  244, 1217, 1215,  244, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1210,  317, 1468,  354,
     1468, 1216, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1219,  354, 1226, 1226, 1226, 1217,  355,  356, 1222,  355,
      356, 1227, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,  354, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1468, 1468, 1468,
     1468, 1227, 1424, 1468, 1468, 1468, 1468, 1468, 1228, 1229,
     1230, 1231, 1468, 1425,  318,  319,  355,  356, 1468, 1232,
     1235, 1236, 1468,  227, 1225, 1468, 1248, 1468,  355,  356,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1228, 1229,
     1230, 1231,  428,  429, 1237, 1468, 1468, 1196, 1238, 1232,
     1235, 1236, 1234, 1239, 1240,  355,  356,  227, 1468, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1241, 1242, 1244,
     1245, 1249, 1250, 1243, 1237, 1233,  244, 1468, 1238, 1468,
     1144, 1468, 1234, 1239, 1240,  244, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1203, 1215, 1468, 1241, 1242, 1244,
     1245, 1249, 1250, 1243, 1251, 1233, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1154, 1247, 1253,  244,  354, 1252,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,  244, 1246,
     1254,  354, 1468, 1468, 1251, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1257, 1260, 1247, 1253, 1428, 1424, 1252,
     1219, 1468, 1468,  244, 1261, 1468, 1468, 1468, 1429, 1425,

     1254, 1428, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1218, 1468, 1429, 1257, 1260, 1222, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1261,  355,  356, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1221, 1468, 1468,  355,  356,
     1262, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1468,
     1226, 1226, 1226, 1263, 1266, 1255, 1267, 1468, 1468, 1268,
     1468, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1468,
     1262,  227, 1269, 1271, 1272, 1273, 1256, 1274, 1275, 1278,
      227, 1248, 1279, 1263, 1266, 1280, 1267, 1264, 1281, 1268,
     1282,  354, 1265, 1270,  244, 1468,  354, 1284, 1287, 1289,

     1290,  244, 1269, 1271, 1272, 1273, 1256, 1274, 1275, 1278,
     1293, 1288, 1279, 1295, 1297, 1280, 1298, 1264, 1281, 1296,
     1282, 1276, 1265,  244,  244, 1283, 1277, 1284, 1287, 1289,
     1290, 1468, 1299,  244, 1304,  354, 1300, 1301, 1302, 1303,
     1293,  244,  227, 1295, 1297, 1308, 1298, 1310, 1311, 1296,
     1314, 1276, 1309, 1317, 1294, 1283, 1277, 1323,  355,  356,
     1291, 1468, 1299,  355,  356,  244, 1300, 1301, 1302, 1303,
     1324, 1307,  227, 1468, 1325, 1308, 1326, 1310, 1311, 1305,
     1314, 1304, 1309, 1317, 1329,  244, 1330, 1323, 1312, 1316,
     1291, 1292, 1292, 1292, 1248, 1315, 1468,  244, 1334,  354,

     1324, 1307,  355,  356, 1325, 1335, 1326, 1337,  244, 1305,
     1338, 1339, 1341, 1343, 1329, 1340, 1330, 1318, 1312, 1331,
     1344, 1327,  354, 1345, 1313, 1315, 1328, 1346, 1334, 1347,
     1348, 1350, 1351, 1336, 1353, 1335, 1359, 1337, 1354, 1249,
     1338, 1339, 1341, 1343, 1468, 1340, 1355, 1349, 1356, 1331,
     1344, 1327,  244, 1345, 1313, 1357, 1328, 1346, 1342, 1347,
     1348, 1350, 1351, 1358, 1353, 1360,  355,  356, 1354, 1249,
     1361, 1362, 1364,  354, 1352, 1365, 1355, 1349, 1356, 1366,
     1368, 1277, 1369,  244, 1370, 1357, 1371, 1372, 1342,  355,
      356, 1363, 1359, 1358, 1374, 1360, 1375, 1304, 1377, 1380,

     1361, 1362, 1364, 1382, 1352, 1365, 1383, 1376, 1384, 1366,
     1368, 1277, 1369,  354, 1370, 1389, 1371, 1372, 1468, 1463,
     1468, 1363, 1385, 1386, 1374, 1387, 1375, 1388, 1377, 1380,
     1464, 1391, 1373, 1382, 1468, 1468, 1383, 1389, 1384, 1468,
      355,  356, 1305, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1468, 1385, 1386, 1392, 1387, 1394, 1388, 1395, 1396,
     1328, 1391, 1373,  354, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1305, 1397, 1398, 1399,  354, 1400, 1402, 1468,
      355,  356, 1468, 1468, 1392, 1393, 1394, 1406, 1395, 1396,
     1328, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1403,

     1468, 1422, 1404, 1397, 1398, 1399, 1401, 1400, 1402, 1468,
     1405, 1407, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1408, 1409, 1410, 1413, 1416, 1418, 1419, 1420, 1417, 1403,
      355,  356, 1404, 1421, 1423, 1426, 1427, 1431, 1432, 1433,
     1405, 1407, 1430,  355,  356, 1434, 1435, 1436, 1437, 1438,
     1408, 1409, 1410, 1413, 1416, 1418, 1419, 1420, 1417, 1439,
     1440, 1441, 1442, 1421, 1423, 1426, 1427, 1431, 1432, 1433,
     1443, 1444, 1430, 1446, 1449, 1434, 1435, 1436, 1437, 1438,
     1445, 1448, 1451, 1452, 1454, 1455, 1457, 1458, 1459, 1439,
     1440, 1441, 1442, 1460, 1461, 1462, 1465, 1468, 1463, 1466,

     1443, 1444, 1468, 1446, 1449, 1468, 1468, 1447, 1450, 1464,
     1467, 1466, 1451, 1452, 1454, 1455, 1457, 1458, 1459, 1468,
     1468, 1468, 1467, 1460, 1461, 1462, 1465, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1447, 1450,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  226, 1468, 1468, 1468,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  239,  239,  239,  239, 1468,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  240, 1468,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  243, 1468, 1468, 1468,  243, 1468,  243,
      286,  286, 1468,  286,  286, 1468, 1468, 1468,  286,  286,
      286,  288,  288,  288,  288,  304,  304, 1468, 1468, 1468,
      304,  309,  309,  309,  309, 1468,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  312, 1468,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  316,  316, 1468,  316,  316,  316, 1468,
     1468,  316,  316,  316,  321, 1468,  321, 1468,  321, 1468,
      321,  319,  319,  319,  319,  341, 1468, 1468, 1468, 1468,
      341,  341,  341, 1468, 1468,  341,  344,  344, 1468,  344,
      344, 1468, 1468, 1468,  344,  344,  344,  346,  346,  346,
      346,  347,  347, 1468,  347,  347, 1468, 1468, 1468,  347,
      347,  347,  350, 1468, 1468, 1468,  350, 1468,  350,  349,
      349,  349,  349,  353,  353, 1468,  353,  353,  353, 1468,

     1468,  353,  353,  353,  356,  356,  356,  356,  369,  369,
      369,  369, 1468,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  372, 1468,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      375,  375, 1468,  375,  375, 1468, 1468, 1468,  375,  375,
      375,  378, 1468, 1468, 1468,  378, 1468,  378,  377,  377,
      377,  377,  385,  385, 1468,  385,  385,  385, 1468, 1468,
      385,  385,  385,  390, 1468,  390, 1468,  390, 1468,  390,
      388,  388,  388,  388,  405,  405,  405,  405, 1468,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      408, 1468,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  411,  411, 1468,  411,
      411, 1468, 1468, 1468,  411,  411,  411,  414, 1468, 1468,
     1468,  414, 1468,  414,  413,  413,  413,  413,  421,  421,
      421,  421, 1468,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  424, 1468,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      427,  427, 1468,  427,  427, 1468, 1468, 1468,  427,  427,
      427,  430, 1468, 1468, 1468,  430, 1468,  430,  429,  429,
      429,  429,  226, 1468, 1468, 1468,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  451, 1468,
     1468, 1468,  451,  451,  451,  451,  451,  451, 1468,  451,
      451,  451,  451,  451,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      240, 1468,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  243, 1468, 1468, 1468,
      243, 1468,  243,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  509,
      509,  509,  509, 1468,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  510,  510,  510,  510,  510,

     1468,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  286,  286, 1468,  286,  286, 1468, 1468, 1468,  286,
      286,  286,  288,  288,  288,  288,  304,  304, 1468, 1468,
     1468,  304,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  310, 1468,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  312, 1468,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      532, 1468,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  315, 1468,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  316,  316, 1468,  316,  316,  316, 1468, 1468,
      316,  316,  316,  536,  536,  536,  536,  536, 1468, 1468,
     1468,  536,  536,  536,  319,  319,  319,  319,  321, 1468,
     1468, 1468,  321, 1468,  321,  324,  324,  324,  324,  540,
     1468, 1468, 1468,  540, 1468,  540,  341, 1468, 1468, 1468,
     1468,  341,  341,  341, 1468, 1468,  341,  344,  344, 1468,
      344,  344, 1468, 1468, 1468,  344,  344,  344,  346,  346,
      346,  346,  347,  347, 1468,  347,  347, 1468, 1468, 1468,
      347,  347,  347,  349,  349,  349,  349,  350, 1468, 1468,

     1468,  350, 1468,  350,  352,  352,  352,  352,  552, 1468,
     1468, 1468,  552, 1468,  552,  353,  353, 1468,  353,  353,
      353, 1468, 1468,  353,  353,  353,  553,  553,  553,  553,
      553, 1468, 1468, 1468,  553,  553,  553,  356,  356,  356,
      356,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370, 1468,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  372, 1468,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  374,
     1468,  374,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  375,  375, 1468,  375,  375,
     1468, 1468, 1468,  375,  375,  375,  377,  377,  377,  377,
      378, 1468, 1468, 1468,  378, 1468,  378,  380,  380,  380,
      380,  572, 1468, 1468, 1468,  572, 1468,  572,  385,  385,
     1468,  385,  385,  385, 1468, 1468,  385,  385,  385,  575,
      575,  575,  575,  575, 1468, 1468, 1468,  575,  575,  575,
      388,  388,  388,  388,  390, 1468, 1468, 1468,  390, 1468,
      390,  393,  393,  393,  393,  579, 1468, 1468, 1468,  579,
     1468,  579,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  406, 1468,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  408, 1468,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      410, 1468,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  411,  411, 1468,  411,
      411, 1468, 1468, 1468,  411,  411,  411,  413,  413,  413,
      413,  414, 1468, 1468, 1468,  414, 1468,  414,  416,  416,
      416,  416,  591, 1468, 1468, 1468,  591, 1468,  591,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  422, 1468,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  424, 1468,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  426, 1468,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  427,  427, 1468,  427,  427, 1468, 1468,
     1468,  427,  427,  427,  429,  429,  429,  429,  430, 1468,
     1468, 1468,  430, 1468,  430,  432,  432,  432,  432,  597,
     1468, 1468, 1468,  597, 1468,  597,  451, 1468, 1468, 1468,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  226, 1468, 1468, 1468,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      243, 1468, 1468, 1468,  243, 1468,  243,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  286,
      286, 1468,  286,  286, 1468, 1468, 1468,  286,  286,  286,
      304,  304, 1468, 1468, 1468,  304,  310, 1468,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  532, 1468,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  535, 1468,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  536,  536, 1468,  536,  536, 1468,
     1468, 1468,  536,  536,  536,  539,  539,  539,  539,  316,
      316, 1468,  316,  316,  316, 1468, 1468,  316,  316,  316,
      553,  553, 1468,  553,  553, 1468, 1468, 1468,  553,  553,
      553,  556,  556,  556,  556,  353,  353, 1468,  353,  353,
      353, 1468, 1468,  353,  353,  353,  370, 1468,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  375,  375, 1468,  375,  375, 1468, 1468, 1468,
      375,  375,  375,  575,  575, 1468,  575,  575, 1468, 1468,
     1468,  575,  575,  575,  578,  578,  578,  578,  385,  385,
     1468,  385,  385,  385, 1468, 1468,  385,  385,  385,  406,
     1468,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  411,  411, 1468,  411,  411,
     1468, 1468, 1468,  411,  411,  411,  422, 1468,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  427,  427, 1468,  427,  427, 1468, 1468, 1468,

      427,  427,  427,  226, 1468, 1468,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  243,
     1468, 1468, 1468,  243, 1468,  243,  286,  286, 1468,  286,
      286, 1468, 1468, 1468,  286,  286,  286,  304,  304, 1468,
     1468, 1468,  304,  817, 1468, 1468, 1468, 1468,  817,  817,
     1468, 1468, 1468,  817,  536,  536,  536,  536,  536, 1468,
     1468, 1468,  536,  536,  536, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378,   33, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,

     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468
    } ;

static const flex_int16_t yy_chk[7867] =
    {   0,
        0,    1,    1,    1,    1,   11,   11,   11,   11,   12,
       12,   12,   12,   31,   31,   31,   31,   32,   32,   32,
       32,   35,   46,   49,   35,   46,   53,   39,   48,    1,
        1,    1,    1, 1454,   51,   41,   46,   47,    1,   42,
       48,   38,    1,   31,   43,   42,   44,   32,   56,    1,
       85,   56,   85,   88,   40,   53,   88,   39,   49,    1,
        1,    1,    1,   47,   51,   41,   50,  489,    1,   42,
       48,   38,    1,   31,   43,   42,   44,   32,   54,    1,
        2,    2,    2,    2,   40,   53,   50,   52,   49, 1451,
       76,   91,   91,   47,   51,   61,   61,   61,   61,   61,

       61,   61,   61,   69,   54,  104,  104,   52,    2,    2,
        2,    2,   68,   52,   72,   70,   50,    2,   68,   68,
       76,    2,   70,   71,  108,   76,   85,   71,    2, 1446,
      116,  122,  122,   69,   54,  489,  121,   52,    2,    2,
        2,    2,   68,   52,   72,   70,   72,    2,   68,   68,
       69,    2,   70,   71,  108, 1443,   68,   71,    2,    3,
        3,    3,    3,   70,   64,   64,   64,   64,   64,   64,
       64,   64,   64,    3,   74,  109,   73, 1416,   71,   74,
       82,   73, 1598,    3,   73,   82, 1598,    3,    3,    3,
        3,  141,  141,    3,  121,  121,    3,  116,  116, 1396,

        3,  136,   77,   77,   74,  109,   73,    3, 1378,   74,
       82,   73,  136,  120,   73,   82,   74,    3,    3,    3,
        3, 1365,   82,    3,  133,   75,    3,  626,   73,   75,
        3,   64,   77,   77,  501,   75,  627,    3,    4,    4,
        4,    4, 1311,   65,   65,   65,   65,   65,   65,   65,
       65,   65,    4,   79,   78,   75,   77,   79,   83,   75,
      144,  144,    4,   78,   81,   75,    4,    4,    4,    4,
       81, 1295,    4,   81,   84,    4,   75,  145,  145,    4,
      120,  120,  138,   79,   78,  138,    4,   79,   83,  146,
      146,  133,  133,   78,   81,  626,    4,    4,    4,    4,

       81,   78,    4,   81,   84,    4,  148,  148,   79,    4,
       65,   81,  501,   83,  627,   84,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   92,    9,   93,

        9, 1282,   93,  164,  164,  165,  165,   96, 1261,    9,
        9,    9,  101,  169,  169,  646,    9,  215,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   92, 1241,   93,
        9,  176,   93,   92,   92,  177,  177,   96,    9,    9,
        9,    9,  101,   93,   93,  149,    9,  215,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   94,   96,   96,
        9,   94,  218,  101,  101,  189,  189,    9,    9,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,  219,   10, 1092,   10,   66,   95,   94,  646,  176,
      176,   94,  218,   10,   10,   10,   80,   97,   80,   99,

       10,   98,   80,  220,   97,  190,  190, 1085,   94,   94,
       80,  219,  149,  149,   10,   67,   95, 1067,   95,   95,
      195,  195,   10,   10,   10,   10,   80,   97,   80,   99,
       10,   98,   80,  220,   97,  200,  200,   99,   99,  340,
       80,   98,   98, 1023,   10,  211,   97,   97,  211,   80,
      340,   10,   10,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15, 1022,
       15, 1021,   15,  100,  201,  201,  102, 1006,  112,  166,
      112,   15,   15,   15,  112,  112,  114,  112,  114,  193,
      221,  123,  114,  114,  161,  114,  159,  202,  202,  112,
      209,  209,  939,  100,  222,  124,  102,  114,  159,  166,
       15,   15,   15,   15,  100,  100,  102,  102,  933,  193,

      221,  166,  166,  123,  628,  223,  193,  193,  112,  112,
      124,  128,  214,  173,  222,  214,  114,  114,  159,   15,
       15,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,  123,   16,  223,   16,  128,  123,  123,
      124,  161,  161,  159,  159,   16,   16,   16,  117,  232,
      117,  916,  124,  124,  117,  117,  216,  117,  117,  216,
      157,  286,  286,  288,  288,  125,  224,  128,  126,  117,
      225,  153,  232,  127,   16,   16,   16,   16,  128,  128,
      173,  173,  628,  126,  129,  127,  341,  153,  633,  127,
      611,  125,  157,  126,  125,  913,  224,  341,  117,  117,

      225,  611,  232,   16,   16,   17,   17,   17,   17,   17,
       17,   17,   17,  126,  129,  127,   17,  153,   17,  127,
       17,  125,  157,  126,  125,  117,  117,  157,  157,   17,
       17,   17,  125,  125,  228,  126,  126,  228,  153,  153,
      127,  127,  154,  612,  129,  289,  289,  855,  228,  130,
      229,  129,  129,  151,  612,  131,  742,  131,   17,   17,
       17,  131,  131,  186,  131,  131,  633,  154,  130,  130,
      321,  321,  861,  151,  324,  324,  131,  229,  150,  150,
      150,  150,  150,  150,  150,  150,  150,   17,   17,   18,
       18,   18,   18,   18,   18,   18,   18,  154,  130,  130,

       18,  155,   18,  151,   18,  131,  131,  229,  279,  154,
      154,  167,  235,   18,   18,   18,  130,  130,  191,  851,
      151,  151,  837,  183,  155,  855,  235,  156,  230,  742,
      186,  186,  131,  131,  152,  183,  344,  344,  279,  158,
      236,  167,   18,   18,   18,  150,  150,  614,  191,  167,
      167,  158,  156,  152,  155,  158,  235,  156,  614,  230,
      191,  191,  279,  205,  836,  183,  236,  179,  155,  155,
      192,   18,   18,   19,   19,   19,   19,   19,   19,   19,
       19,  158,  156,  152,   19,  158,   19,  156,   19,  230,
      183,  183,  179,  205,  156,  156,  236,   19,   19,   19,

      192,  152,  152,  172,  835,  172,  158,  158,  204,  172,
      172,  259,  172,  192,  192,  205,  205,  178,  834,  180,
      830,  181,  179,  174,  172,  174,   19,   19,   19,  174,
      174,  316,  174,  174,  179,  179,  926,  319,  204,  346,
      346,  259,  347,  347,  174,  180,  181,  184,  180,  178,
      204,  204,  259,  172,  172,   19,   19,   20,   20,   20,
       20,   20,   20,   20,   20,  203,  203,  184,   20,  234,
       20,  762,   20,  174,  174,  180,  181,  206,  180,  178,
      759,   20,   20,   20,  178,  178,  180,  180,  181,  181,
      207,  266,  231,  830,  234,  203,  203,  184,  316,  316,

      174,  174,  203,  203,  319,  319,  725,  206,  231,  926,
       20,   20,   20,  720,  184,  184,  461,  242,  206,  206,
      207,  266,  461,  242,  234,  461,  242,  207,  207,  242,
      242,  242,  242,  242,  242,  242,  242,  266,  231,   20,
       20,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   23,   23,   23,   23,
       23,   23,   23,   23,  237,  250,   23,  182,   23,  650,
       23,  245,  245,  245,  245,  245,  245,  245,  245,   23,
       23,   23,  248,  182,  254,  249,   23,   23,  606,  251,
      349,  349,  269,  237,  252,  250,  604,  305,  182,  246,
      246,  246,  246,  246,  246,  246,  246,  246,   23,   23,
       23,  932,  248,  182,  254,  249,   23,   23,  250,  251,
      254,  262,  269,  237,  252,  603,  248,  305,  182,  253,

      258,  251,  253,  269,  182,  182,  249,   23,   23,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  263,  252,
       24,  262,   24,  260,   24,  255,  270,  264,  256,  253,
      258,  265,  253,   24,   24,   24,  246,  267,  255,  260,
       24,   24,  253,  256,  258,  602,  262,  264,  263,  350,
      350,  272,  306,  260,  932,  255,  270,  264,  256,  270,
      263,  265,   24,   24,   24,  352,  352,  267,  255,  260,
       24,   24, 1600,  256,  265,  260, 1600,  264,  255,  256,
      264,  272,  306,  375,  375,  377,  377,  378,  378,  272,
      267,   24,   24,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  268,  273,   27,  271,
       27,  274,   27,  275,  596,  278,  280,  590,  276,  281,

      817,   27,   27,   27,  271,  281,  290,  908,   27,  380,
      380,  817,   27,  390,  390,  282,  268,  273,  908,  271,
      571,  274,  317,  275,   27,  278,  280,  273,  276,  281,
       27,   27,   27,  335,  271,  281,  290,  275,   27,  268,
      274,  276,   27,  281,  271,  282,  917,  290,  290,  292,
      278,  280,  293,  282,   27,  393,  393,  917,  292,   27,
       27,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      411,  411,   28,  332,   28,  296,   28,  294,  533,  292,
      291,  291,  293,  295,  530,   28,   28,   28,  292,  293,
      293,  300,   28,  317,  317,  937,   28,  413,  413,  527,

      335,  335,  292,  292,  332,  296,  338,  294,   28,  297,
      291,  291,  302,  295,   28,   28,   28,  296,  296,  295,
      295,  300,   28,  291,  291,  297,   28,  298,  294,  294,
      856,  299,  414,  414,  332,  300,  300,  338,   28,  297,
      332,  332,  302,   28,   28,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  510,  297,   29,  298,   29,  301,
       29,  299,  297,  297,  302,  302,  509,  338,  937,   29,
       29,   29,   29,  338,  338,  354,   29,  382,  298,  298,
       29,  328,  299,  299,  327,  416,  416,  495,  308,  301,
      308,   29,   29,  442,  308,  308,  328,  308,   29,   29,

       29, 1027,   29,  301,  301, 1070,   29,  382,  856,  308,
       29,  427,  427,  327,  429,  429, 1070,  386,  382,  382,
      443,   29,   29,  442,  333,  471,  328,   29,   29,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  308,  308,
       30, 1605,   30,  327,   30, 1605,  354,  354,  328,  328,
      443,  327,  327,   30,   30,   30,   30,  333,  470,  320,
       30,  320,  331,  465,   30,  320,  320,  329,  320,  320,
      451,  330,  434,  336, 1027,   30,   30,  747,  331,  334,
      320,  353,   30,   30,   30,  422,   30,  333,  386,  386,
       30,  333,  333,  336,   30,  421,  329,  330,  337,  430,

      430,  406,  334,  432,  432,   30,   30,  356,  331,  320,
      320,   30,   30,   86,  337,   86,   86,   86,   86,   86,
       86,   86,   86,  336,  364,   86,  329,  330,  360,  331,
      331,  359,  334,  358,  329,  329,  320,  320,  330,  330,
      336,  336,  360,  359,  337,  747,  334,  334,  353,  353,
      362,  405,   86,   86,   86,   86,  115,  115,  358,  115,
      115,  115,  115,  115,  115,  337,  337,  115,  361,  115,
      395,  115,  360,  359,  356,  356,  362,  381,  435,  435,
      115,  115,  115,  361,  436,  436,  419,  370,  358,  363,
      934,  364,  364,  439,  439,  360,  360,  444,  359,  359,

      358,  358,  385, 1228,  365,  369,  362,  381,  368,  115,
      115,  115,  326,  361, 1228,  366,  419,  362,  362,  367,
      363,  388,  536,  536,  445,  539,  539,  444,  365,  381,
      381,  367,  417,  419,  419,  361,  361,  368,  115,  115,
      163,  163,  400,  163,  163,  163,  163,  163,  163,  366,
      363,  163,  399,  163,  445,  163,  363,  363,  365,  553,
      553,  367,  417,  310,  163,  163,  163,  368,  934,  385,
      385,  365,  365,  400,  446,  368,  368,  396,  399,  366,
      556,  556,  366,  366,  417,  417,  367,  367,  388,  388,
      384, 1257,  384,  163,  163,  163,  384,  384,  397,  384,

      575,  575, 1257,  400,  446, 1258,  396,  309,  399,  400,
      400,  384,  418,  397,  277,  401, 1258,  398, 1093,  399,
      399,  402,  163,  163,  188,  188,  261,  188,  188,  188,
      188,  188,  188,  402,  447,  188,  396,  188,  401,  188,
      384,  384,  418,  397,  396,  396,  398,  257,  188,  188,
      188,  389,  243,  389,  241,  418,  418,  389,  389,  404,
      389,  389,  240,  402,  447,  397,  397,  448,  401,  449,
      450,  239,  389,  438,  403,  528,  398,  188,  188,  188,
      578,  578,  401,  401,  398,  398,  573,  403,  402,  402,
      404, 1093,  437,  233,  452,  672,  672,  448,  453,  449,

      450,  389,  389,  438,  454,  528,  188,  188,  199,  199,
      453,  199,  199,  199,  199,  199,  199,  403,  454,  199,
      404,  199,  437,  199,  438,  438,  404,  404,  389,  389,
      452,  455,  199,  199,  199,  440,  456,  457,  458,  440,
      453,  403,  403,  474,  437,  437,  607,  455,  454,  457,
      459,  226,  458,  476,  573,  573,  703,  703,  456,  496,
      452,  199,  199,  199,  729,  440,  605,  605,  605,  440,
      717,  717,  459,  474,  729,  729,  607,  455,  213,  457,
      197,  474,  458,  476,  476,  171,  440,  440,  456,  496,
      199,  199,  244,  463,  244,  244,  244,  244,  244,  244,

      244,  244,  459,  496,  244,  463,  463,  463,  463,  463,
      463,  463,  463,  464,  464,  464,  464,  464,  464,  464,
      464,  467,  467,  467,  467,  467,  467,  467,  467,  767,
      767,  244,  244,  244,  244,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  472,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  478,  475,  479,  473,  475,  487,  492,  506,
      140,  493,  477,  774,  774,  480,  631,  631,  631,  472,
      483,  481,  135,  482,  486,  543,  484,  558,  247,  247,
      247,  247,  478,  475,  479,  473,  475,  487,  492,  506,

      472,  493,  477,  492,  506,  480,  475,  493,  485,  478,
      483,  481,  487,  482,  486,  479,  484,  247,  311,  311,
      473,  311,  311,  311,  311,  311,  311,  477,  480,  311,
      488,  311,  481,  311,  482,  483,  486,  484,  485,  490,
      491,  111,  311,  311,  311,  494,  497,  500,  498,  499,
      503,  504,  543,  543,  558,  558,  631,  850,  608,  485,
      488,  812,  812,  502,  507,  507,  508,  542,  542,  490,
      491,  311,  311,  311,  592,  494,  497,  500,  498,  499,
      503,  504,  505,  815,  815,  488,  511,  497,  608,  500,
      490,  491,  504,  502,  507,  507,  508,  503,  494,  498,

      311,  311,  312,  312,  499,  312,  312,  312,  312,  312,
      312,  508,  505,  312,  502,  312,  511,  312,  507,  512,
      515,  106,  513,  511,  511,  850,  312,  312,  312,  514,
      609,  505,  557,  868,  868,  542,  542,  519,  557,  610,
     1088,  557,  592,  592, 1609,  625,  634,  677, 1609,  512,
      515,  516,  513,  517,   90,  312,  312,  312,  520,  514,
      609,   62,  512,  512,  513,  513,  518,  519,  523,  610,
      521,  515,  515,  514,  514,  625,  634,  677,  519,  519,
      625,  516,  634,  517,  312,  312,  313,  313,  520,  313,
      313,  313,  313,  313,  313,  522,  518,  313,  523,  313,

      521,  313,  520,  520,  516,  516,  517,  517,  523,  523,
      313,  313,  313,  524,  525,  559,  574,  639, 1088,  518,
      518,  521,  521,   60,  623,  522,  632,  559,  559,  559,
      559,  559,  559,  559,  559,  871,  871,  522,  522,  313,
      313,  313,  526,  524,  525,   58,  574,  639,  563,  563,
       45,  567,  581,  581,  623,  582,  632,  524,  524,  574,
      574,  639,  623,  598,  632,  525,  525, 1268,  313,  313,
      314,  314,  526,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  357,  526,  526,  541,

     1612,  544,  357,  545, 1612,  357,   37,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  563,  563,  567,  567,
      581,  581,  582,  582,  678,  544,  547,  640,  545,  541,
      546,  598,  598,  719,  613,  613,  613,  549,  737,  737,
      737,  737,  547, 1271,  548, 1268,  551,  613,   33,  550,
      873,  873,  876,  876,  678,  544,  546,  640,  545,  541,
      548,  640,  549,  719,    0,  551,  541,  541,  544,  544,
      545,  545,  547,  560,  357,  357,  371,  371,  550,  371,
      371,  371,  371,  371,  371,  560,  546,  371,  580,  371,
      548,  371,  549,  547,  547,  551,  600,  546,  546,    0,

      371,  371,  371,  737,  549,  549,  635,    0,  550,    0,
      561,  548,  548,  551,  551,  560,  550,  550,  580,    0,
      564, 1271,  562,  952,  724,    0,  600,    0,  565,  371,
      371,  371,  564,  566,  600,  600,  635,  569,  635,  561,
      560,  560,  562,  681,  565,  877,  877,  865,  580,  566,
      569,  569,    0,  568,  724,  580,  580,  723,  371,  371,
      372,  372,  564,  372,  372,  372,  372,  372,  372,  561,
      583,  372,  562,  372,  565,  372,  568,  561,  561,  566,
      569,  569,  593,    0,  372,  372,  372,  564,  564,  562,
      562,  952,  641,  594,  583,  565,  565,  599,  723,  622,

      566,  566,  955,  955,  569,  569,  568,  920,  957,  957,
      681,  681,  593,  372,  372,  372, 1074,  920,  920,    0,
      568,  568,  641,  594,  583,  865,  865,  599,  723,  622,
      641, 1353,  683,  593,  593,  594,  594,  583,  583,  599,
      599,  622,  372,  372,  373,  373,  584,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      407,  407,  584,  407,  407,  407,  407,  407,  407,  586,
      617,  407,  585,  407, 1074,  407,  615,  601,  629,    0,
      618,  617,  644,  624,  407,  407,  407,  615,  585,  683,

      683,  618,  584,  587, 1353,  643,  630,  617,  616,  615,
      586,  624, 1615,  584,  584,  588, 1615,  601,  629,  616,
        0,  618,  644,  407,  407,  407,  587,  644,  585,  601,
      601,  629, 1297,  645,  588,  643,  630,  617,  954,  615,
      586,  624,  616,  643,  642,  636,  586,  586,  630,  585,
      585,  618,  407,  407,  408,  408,  587,  408,  408,  408,
      408,  408,  408,  645,  588,  408,  624,  408,  637,  408,
      587,  587,  616,  619,  642,  636,  958,  958,  408,  408,
      408,  647,  588,  588,  645,  619,  619,  619,  619,  619,
      619,  619,  619,  620,  636,  649,  653,  642,  637,  620,

      620,  620,  620,  620,  620,  620,  620,  408,  408,  408,
     1297,  647,  959,  959,    0,  637,  954,  954,  941,  647,
      931,  931,  931,  688,  941,  649,  653,  941, 1005, 1005,
     1005,    0,  651,  649,  688,    0,  408,  408,  409,  409,
      653,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  423,  423,  638,  423,  423,  423,
      423,  423,  423,  648,  651,  423,  652,  423,  655,  423,
      654,  656,  658,    0,  657,  975,  659,    0,  423,  423,
      423,  975,  661,  662,  975,  666,  638,    0,  665,  706,

      931,  688,  688,  648,  651, 1032,  652,    0,  655,  664,
      654,  656,  658,  652,  657,  654,  659,  423,  423,  423,
      668,  638,  661,  662,  648,  666,  707,  663,  665,  655,
      658,  657,  656,  659,  665,  665,  666,  666,    0,  664,
      662,  662,    0,  661,  661,  667,  423,  423,  424,  424,
      668,  424,  424,  424,  424,  424,  424,  663,  669,  424,
      671,  424,  673,  424,  664,  664,  706,  706,  668,  668,
      670,    0,  424,  424,  424,  667, 1264,  676,  663,  663,
      667,  667,  726, 1032, 1032,  727,  736, 1264,  669,  758,
      671,    0,  673,  707,  707,    0,  669,  669,  671,  671,

      670,  424,  424,  424,  699,  670,  670,  676,  690,    0,
      699,    0,  726,  676,  676,  727,  736,  673,  673,  758,
      690,  690,  690,  690,  690,  690,  690,  690,  736,  789,
      424,  424,  425,  425,    0,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  674,  466,  714,  675,  741,  699,  699,  691,
      702,    0,  466,  466,  466,  691,  691,  691,  691,  691,
      691,  691,  691, 1054, 1054,    0,  789,  789, 1060, 1060,

      716,    0,  674,    0,  714,  675,  741,  682,    0,  680,
      702,  466,  466,  466,  466, 1128, 1128,    0,  741, 1166,
     1166,  686,  711,  714,  714,  680,  674,  674,  675,  675,
      716,  702,  702,  711,    0,    0,  716,  716,  682,  686,
      466,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  680,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  682,  686,
        0,  685,  745, 1285,  682,  682,  680,  680,  679,  751,
      684,  750,    0,  692, 1285,  685,  694,  693,  686,  686,
      743,  732,    0,  693,  468,  468,  468,  468,    0,  951,

      711,  711,  745,  687,  679,  693,  695,  684,  951,  751,
      694,  750,  692,  808,  745,  685,  751,  750,    0,  687,
      743,  732,  695,  468,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  679,  693,  469,  684,  685,  685,
      694,  743,  692,  732,  696,  679,  679,  684,  684,  687,
      692,  692,  695,  694,  694,  698,    0,  704,  712,  697,
      693,  693,    0,  469,  469,  469,  469,  701, 1298,  705,
      687,  687,  951,  695,  695,  696,  708,  697, 1299, 1298,
      808,  808,  700,  704,  698,  705,  701,  709,  712, 1299,
      708,    0,  469,  531,  531,    0,  531,  531,  531,  531,

      531,  531,  700,  709,  531,  696,  531,  697,  531,  712,
      712,  696,  696,  704,  698,  705,  701,  531,  531,  531,
      708,  713,  698,  698,  704,  704,  697,  697,  744,    0,
      728,  721,  700,  709,  701,  701,  705,  705,  733,    0,
      710,  728,  715,  708,  708,    0,  531,  531,  531,  700,
      700,  713,    0,    0,  709,  709,  710,  721,  744,  728,
      731,  718,  722,  722,  722,    0,    0,  735,  733,  733,
      738,  731,  715,  713,  713,  531,  531,  532,  532,  744,
      532,  532,  532,  532,  532,  532,  710,  721,  532,  728,
      532,  718,  532,  715,  715,  730,  731,  735,  739,  746,

      738,  532,  532,  532,  752,  722,  730,  710,  710,  749,
      718,  718,  734,  734,  734,  734,  734,  734,  734,  734,
      735,  730,  755,  782,    0,  738,  731,  816,  739,  746,
      532,  532,  532,  748,  752,  722, 1033, 1033, 1033,  749,
     1104,  879,  752,  790,  740,  740,  740,    0,  746, 1033,
      739,  730,  755,  782,  790,    0,  749,  816,  755,  532,
      532,  534,  534,  748,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  740,  748,  753,
      754,  754,  754,  754,  754,  754,  754,  754,  756,  757,

      760,  761,  763,  764,  765,  771,  766,  769,  879,  879,
        0, 1104, 1104,    0,  768, 1308,    0,  740, 1007,  753,
        0,  790,  790,  772, 1007,  770, 1308, 1007,  756,  757,
      760,  761,  763,  764,  765,  771,  766,  769,  773,  763,
      756,  753,  775,  761,  768,  764,  776,  760,  766,  777,
      768,  768,  778,  772,  757,  770,  771,  771,  779,  765,
      769,  769,  798,  770,  770,  772,  772,  780,  773, 1312,
      781,  785,  775,  784,  773,  773,  776,  791,  798,  777,
     1312,  786,  778,    0,  792,  777,  777,    0,  779,  787,
      778,  778,  788,  775,  775,  803,    0,  780,  776,  776,

      781,  786,  784,  780,  780,  795,  785,  791,  798,    0,
      794,    0,  797,  779,  779,  787,    0,  795,  797, 1323,
      792,  781,  781,  788,  794,  803,  799,  803,  803,  798,
      798,  786,  784,    0,    0,  796,  785,  791,  785,  785,
      784,  784,    0,    0,  818,  787,  799,  795,  786,  786,
      792,  792,  792,  788,  794,  804,  787,  787,  801,  788,
      788,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      796,  809,  795,  795,  818,  802,  799,  794,  794,    0,
      805,    0,    0,  801,  804,  797,  797,  802,  806, 1043,
     1143,  811,  807,  799,  799, 1043, 1143, 1323, 1043, 1143,

      796,  809,  796,  796,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  801,  804,  805,  807,  802,    0,  806,
      810,  811,  804,  804,  819,  801,  801,  814,  793,  793,
      827,  809,  813,  820,    0,    0,  821,  822,  811,  811,
      823,  827,  802,  802,    0,  805,  807,  805,  805,  806,
      810,  824,  810,  810,  819,  806,  806,  814,  825,  807,
      807,  829,  813,  820,  813,  813,  821,  822,  826,  825,
      823,  800,  800,  827,  814,  814,  828,  832,    0,  826,
      833,  824,  838,    0,  839,  825,  831,  828,  840,  841,
      843,  829,  831,  831,  831,  831,  831,  831,  831,  831,

      844,    0,  853,  827,  845,  828,  846,  832,  829,  826,
      833,  848,  838,  832,  839,  825, 1153,    0,  840,  841,
      843,    0, 1153,    0,  847, 1153,  838,  833,  849,  852,
      844,  839,  853,  858,  845,  828,  846,  853,  844,  826,
        0,  848,  843,  883,  841,  842,  842,  842,  842,  842,
      842,  842,  842,  845,  847,  848,  854,  846,  849,  852,
      857,  847,  854,  858,  859,  854,    0,  860,  854,  854,
      854,  854,  854,  854,  854,  854,    0,  862,  863,  864,
      852,  849,  867,  869,  866,  870,    0,  872,  875,  880,
      857, 1319,  874,  878,  859,    0,  857,  860,    0,    0,

      884,  885, 1319,    0,  882,  880,  859,  862,  863,  864,
      883,  883,  867,  869,  866,  870,  863,  872,  875,  860,
      866,  866,  874,  878,  882,  869,  869,  889,  864,  881,
      884,  885,  862,  867,  867,  880,  870,  870,  872,  872,
      902,  875,  875,  874,  874,  886,  881,  888,    0,  898,
      889,  886,  897,  887,  882,    0,  880,  880,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  890,    0,  892,
      902,  882,  882,  896,    0,  907,  881,  900,  888,  893,
      889,  910,  897,  890,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  893,  889,  889,  881,  881,  892,  906,

     1172,  904,  896,  897,  897,  907, 1172,    0,  888, 1172,
        0,  910,  895,  890,  888,  888,  898,  898,  886,  886,
     1266, 1266, 1266,  893,  895,  887,  887,  899,  892,  906,
      903,  904,  896,  911,  890,  890,  892,  892,    0,  901,
      896,  896,  968,  899,  900,  900,  893,  893,  905,  906,
      906,  891,  891,  894,  895,  901,  904,  904,  912,  894,
      903,  914,  894,  911,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  899,  915,  918,  919,    0,  905,  895,
      895,  903,  903,  921,  927,  901,  918,  919,  912,  925,
      924,  914,  928,  935,  899,  899, 1177,    0,  947,  905,

      905, 1321, 1177,    0,  915, 1177,  901,  901,  944,  968,
      968,    0, 1321,  921,  927,  929,  919,  918,    0,  925,
      924,  936,  928,  935,    0,  921,  927,  945,  947,  935,
        0,  894,  894,  922,  922,  922,  922,  922,  922,  922,
      922,  924,  925,  938,  940,  929,  919,  918,  930,  944,
      953,  936,    0,    0,  930,    0,  936,  930,    0,  929,
      930,  930,  930,  930,  930,  930,  930,  930,  945,  946,
      948,  943,  949,  938,  940,  950,  956,  961,  962,  944,
      938,  963,  940,  943,  943,  943,  943,  943,  943,  943,
      943,  960,  962,  969,  965,  953,  966,  971,  945,  946,

      948,  963,  949,  983,  964,  950,  956,  961,  970,  969,
      976,  971,  988,  950,  970,    0,    0,  989,    0,  948,
      946,  960,  962,  949,  965,  953,  966,  956,  956,  964,
        0,  963,  973,  983,  974,    0,  960,  960,  973,  969,
      974,  971,  988, 1044,    0,  962,  962,  989,  963,  963,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  964,
      969,  969,    0,    0,  971,  971,  978,  979, 1332,  982,
        0,  964,  964,  979,  972,    0,  979,  976,  976, 1332,
      972,  970,  970,  972,  977,  980,  972,  972,  972,  972,
      972,  972,  972,  972,  982,  978,  977,  977,  977,  977,

      977,  977,  977,  977,  992,  973,  973,  974,  974,  981,
     1044, 1044,  984,  985,  986,  980,  987,  967,  967,  998,
        0,  991,  993,  981,  982,  978,  994,  995,    0,    0,
      998,  999, 1002,  978,  978,    0,  982,  982,  980,  980,
      979,  979,  984,  985,  986,  992,  987,  996,    0,  985,
      985,  991,  993,  981,    0,    0,  994,  995,  996,  997,
      998,  999, 1002,  987,  987,  984,  984,  986,  986, 1001,
      997,    0,    0, 1015, 1012,  992,  981,  981, 1004,    0,
      999, 1019, 1020, 1029,  996, 1000,  997, 1002, 1113,    0,
      998, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001,

     1010, 1010, 1010, 1015, 1012,    0, 1013, 1001, 1004, 1015,
        0, 1019, 1020, 1029,  996, 1012,  997, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1009, 1010, 1004, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1013, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1016, 1017, 1053, 1010, 1013,    0, 1113,
     1113, 1053, 1024, 1025,    0, 1035, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017,    0, 1028, 1030, 1031, 1018,    0,
        0, 1035, 1036, 1016, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1024, 1025, 1025, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1026,    0, 1016, 1028, 1037, 1031, 1034, 1034,
     1034, 1035, 1028, 1036, 1024, 1038, 1030,    0, 1040,    0,
        0, 1034, 1042, 1042, 1042, 1062, 1062, 1062, 1053, 1053,
     1031, 1031, 1035, 1035,    0, 1042, 1037,    0, 1062,    0,
        0, 1057, 1039, 1036, 1063, 1038, 1030, 1040, 1039, 1036,
     1036, 1039, 1064, 1065, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1057,    0, 1402, 1063,    0, 1404, 1040, 1045,    0,
        0,    0, 1064, 1065, 1402, 1040, 1040, 1404, 1034, 1034,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1066,    0,

        0,    0, 1042, 1042, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1049, 1051,    0, 1056,    0, 1059, 1066, 1041,
     1041, 1055, 1055, 1055, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1050, 1061, 1055, 1058, 1058, 1058, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1056, 1059, 1058, 1051,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1068,
     1075, 1046, 1046, 1061, 1069, 1082, 1071, 1084, 1059, 1059,
     1047, 1047, 1072, 1072, 1072, 1069, 1056, 1071,    0, 1051,
     1051, 1051, 1056, 1056, 1061, 1061, 1077, 1077, 1077, 1068,

     1075, 1078, 1078, 1078, 1087, 1082, 1075, 1084, 1101, 1101,
     1101, 1055, 1055, 1089, 1069, 1084, 1090,    0, 1071,    0,
     1106, 1101,    0, 1076,    0, 1058, 1058, 1052, 1052, 1076,
     1091,    0, 1076, 1097, 1087, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1089, 1069, 1087, 1090, 1078, 1071, 1079,
     1079, 1079, 1080, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1091, 1072, 1097, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080,    0, 1081,    0, 1079, 1077, 1078, 1079, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1106, 1106, 1109,
     1083, 1091,    0, 1100, 1123, 1079, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1086, 1079, 1110, 1110, 1079, 1096,
     1086, 1098, 1099, 1086, 1107, 1411, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1094, 1079, 1411, 1103, 1103, 1103,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1100, 1096,
     1103, 1098, 1099, 1105, 1107, 1096,    0,    0, 1099, 1099,
     1112, 1112, 1112,    0, 1119, 1124, 1109, 1109, 1105, 1132,
     1119, 1414,    0, 1112, 1111, 1123, 1123,    0, 1100,    0,
     1111,    0, 1414, 1111, 1110, 1110, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1115,    0,    0,    0, 1105, 1132,
        0, 1122, 1122, 1122, 1133, 1129, 1115, 1115, 1115, 1115,

     1115, 1115, 1115, 1115, 1122,    0, 1116,    0,    0,    0,
     1105, 1105, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1117, 1134, 1124, 1124, 1133, 1129, 1117, 1119, 1119, 1117,
        0, 1135, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1118, 1137,    0, 1146, 1146, 1146, 1118, 1129, 1129, 1118,
        0, 1134, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1120, 1135, 1136,    0,    0,    0, 1120,    0, 1173, 1120,
     1139, 1137, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1121, 1139, 1146,    0, 1142, 1141, 1121,    0, 1136, 1121,
     1147, 1148, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,

     1126, 1126, 1126, 1130, 1130, 1130, 1138, 1139, 1140, 1140,
     1140, 1149, 1146, 1126, 1142, 1141, 1130, 1138, 1136, 1141,
     1147, 1148, 1152,    0, 1156, 1157, 1158, 1159, 1164, 1138,
     1165, 1142, 1145, 1163, 1167, 1173, 1173, 1139,    0, 1176,
        0, 1149, 1171, 1140, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1152, 1155, 1156, 1157, 1158, 1159, 1164, 1138,
     1165, 1170, 1156, 1163, 1167, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1140, 1163, 1171, 1169, 1152, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1162, 1169,    0, 1178,
        0, 1170, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1174, 1181, 1184, 1184, 1184, 1171, 1176, 1176, 1179, 1171,
     1171, 1185, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180,    0,    0,    0,
        0, 1185, 1418,    0,    0,    0,    0,    0, 1186, 1187,
     1188, 1189, 1192, 1418, 1169, 1169, 1178, 1178, 1182, 1190,
     1193, 1194,    0, 1192, 1182,    0, 1212, 1182, 1181, 1181,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1186, 1187,
     1188, 1189, 1184, 1184, 1195,    0, 1191, 1196, 1198, 1190,
     1193, 1194, 1192, 1199, 1200, 1180, 1180, 1191,    0, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1201, 1202, 1206,
     1207, 1212, 1213, 1205, 1195, 1191, 1194,    0, 1198,    0,
     1197,    0, 1192, 1199, 1200, 1195, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1203, 1215,    0, 1201, 1202, 1206,
     1207, 1212, 1213, 1205, 1214, 1191, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1204, 1211, 1216, 1202, 1217, 1215,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1209,
     1217, 1225,    0,    0, 1214, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1227, 1229, 1211, 1216, 1421, 1424, 1215,
     1219,    0,    0, 1211, 1230,    0,    0,    0, 1421, 1424,

     1217, 1428, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1220,    0, 1428, 1227, 1229, 1222, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1230, 1217, 1217, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1223,    0,    0, 1225, 1225,
     1231, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224,
     1226, 1226, 1226, 1232, 1235, 1224, 1236,    0, 1224, 1237,
     1233, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1234,
     1231, 1233, 1240, 1242, 1243, 1244, 1226, 1245, 1247, 1249,
     1234, 1248, 1250, 1232, 1235, 1251, 1236, 1233, 1252, 1237,
     1253, 1255, 1234, 1270, 1236,    0, 1254, 1256, 1260, 1262,

     1263, 1237, 1240, 1242, 1243, 1244, 1226, 1245, 1247, 1249,
     1267, 1288, 1250, 1269, 1272, 1251, 1273, 1233, 1252, 1270,
     1253, 1248, 1234, 1243, 1242, 1254, 1248, 1256, 1260, 1262,
     1263, 1265, 1274, 1247, 1280, 1283, 1275, 1276, 1277, 1278,
     1267, 1267, 1265, 1269, 1272, 1287, 1273, 1289, 1290, 1270,
     1293, 1248, 1288, 1296, 1294, 1254, 1248, 1300, 1255, 1255,
     1265, 1291, 1274, 1254, 1254, 1272, 1275, 1276, 1277, 1278,
     1301, 1283, 1291,    0, 1302, 1287, 1303, 1289, 1290, 1280,
     1293, 1304, 1288, 1296, 1305, 1275, 1306, 1300, 1291, 1316,
     1265, 1292, 1292, 1292, 1326, 1294,    0, 1293, 1309, 1307,

     1301, 1283, 1283, 1283, 1302, 1310, 1303, 1313, 1300, 1280,
     1314, 1315, 1317, 1324, 1305, 1316, 1306, 1318, 1291, 1307,
     1325, 1304, 1331, 1327, 1292, 1294, 1304, 1328, 1309, 1329,
     1330, 1334, 1335, 1336, 1338, 1310, 1344, 1313, 1339, 1326,
     1314, 1315, 1317, 1324,    0, 1316, 1340, 1331, 1341, 1307,
     1325, 1304, 1314, 1327, 1292, 1342, 1304, 1328, 1318, 1329,
     1330, 1334, 1335, 1343, 1338, 1345, 1307, 1307, 1339, 1326,
     1346, 1347, 1350, 1349, 1336, 1351, 1340, 1331, 1341, 1352,
     1354, 1344, 1355, 1338, 1356, 1342, 1357, 1358, 1318, 1331,
     1331, 1349, 1359, 1343, 1360, 1345, 1361, 1362, 1364, 1366,

     1346, 1347, 1350, 1368, 1336, 1351, 1369, 1363, 1370, 1352,
     1354, 1344, 1355, 1363, 1356, 1375, 1357, 1358,    0, 1461,
        0, 1349, 1371, 1372, 1360, 1373, 1361, 1374, 1364, 1366,
     1461, 1377, 1359, 1368,    0,    0, 1369, 1389, 1370,    0,
     1349, 1349, 1362, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367,    0, 1371, 1372, 1380, 1373, 1382, 1374, 1383, 1384,
     1375, 1377, 1359, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1362, 1385, 1387, 1388, 1401, 1389, 1391,    0,
     1363, 1363,    0,    0, 1380, 1381, 1382, 1406, 1383, 1384,
     1375, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1392,

     1390, 1422, 1394, 1385, 1387, 1388, 1390, 1389, 1391, 1390,
     1395, 1397, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1398, 1399, 1400, 1403, 1405, 1407, 1408, 1410, 1406, 1392,
     1376, 1376, 1394, 1413, 1417, 1419, 1420, 1423, 1426, 1427,
     1395, 1397, 1422, 1401, 1401, 1430, 1431, 1433, 1434, 1435,
     1398, 1399, 1400, 1403, 1405, 1407, 1408, 1410, 1406, 1436,
     1437, 1438, 1440, 1413, 1417, 1419, 1420, 1423, 1426, 1427,
     1441, 1442, 1422, 1444, 1447, 1430, 1431, 1433, 1434, 1435,
     1445, 1448, 1449, 1450, 1452, 1453, 1455, 1456, 1457, 1436,
     1437, 1438, 1440, 1458, 1459, 1460, 1462,    0, 1463, 1465,

     1441, 1442,    0, 1444, 1447,    0,    0, 1445, 1448, 1463,
     1465, 1466, 1449, 1450, 1452, 1453, 1455, 1456, 1457,    0,
        0,    0, 1466, 1458, 1459, 1460, 1462,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1445, 1448, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1479,

     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1480,    0,    0,    0, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1481, 1481, 1481, 1481,    0, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1482,    0, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1483,    0,    0,    0, 1483,    0, 1483,
     1484, 1484,    0, 1484, 1484,    0,    0,    0, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1486, 1486,    0,    0,    0,
     1486, 1487, 1487, 1487, 1487,    0, 1487, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488,    0, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1489, 1489,    0, 1489, 1489, 1489,    0,
        0, 1489, 1489, 1489, 1490,    0, 1490,    0, 1490,    0,
     1490, 1491, 1491, 1491, 1491, 1492,    0,    0,    0,    0,
     1492, 1492, 1492,    0,    0, 1492, 1493, 1493,    0, 1493,
     1493,    0,    0,    0, 1493, 1493, 1493, 1494, 1494, 1494,
     1494, 1495, 1495,    0, 1495, 1495,    0,    0,    0, 1495,
     1495, 1495, 1496,    0,    0,    0, 1496,    0, 1496, 1497,
     1497, 1497, 1497, 1498, 1498,    0, 1498, 1498, 1498,    0,

        0, 1498, 1498, 1498, 1499, 1499, 1499, 1499, 1500, 1500,
     1500, 1500,    0, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1501,    0, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1502, 1502,    0, 1502, 1502,    0,    0,    0, 1502, 1502,
     1502, 1503,    0,    0,    0, 1503,    0, 1503, 1504, 1504,
     1504, 1504, 1505, 1505,    0, 1505, 1505, 1505,    0,    0,
     1505, 1505, 1505, 1506,    0, 1506,    0, 1506,    0, 1506,
     1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508,    0, 1508,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,

     1509,    0, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510,    0, 1510,
     1510,    0,    0,    0, 1510, 1510, 1510, 1511,    0,    0,
        0, 1511,    0, 1511, 1512, 1512, 1512, 1512, 1513, 1513,
     1513, 1513,    0, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1514,    0, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1515, 1515,    0, 1515, 1515,    0,    0,    0, 1515, 1515,
     1515, 1516,    0,    0,    0, 1516,    0, 1516, 1517, 1517,
     1517, 1517, 1518,    0,    0,    0, 1518, 1518, 1518, 1518,

     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519,    0,
        0,    0, 1519, 1519, 1519, 1519, 1519, 1519,    0, 1519,
     1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1521,    0, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1522,    0,    0,    0,
     1522,    0, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1524,
     1524, 1524, 1524,    0, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,

        0, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1526,    0, 1526, 1526,    0,    0,    0, 1526,
     1526, 1526, 1527, 1527, 1527, 1527, 1528, 1528,    0,    0,
        0, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1530,    0,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1531,    0, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1532,    0, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1533,    0, 1533, 1533,

     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1534, 1534,    0, 1534, 1534, 1534,    0,    0,
     1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535,    0,    0,
        0, 1535, 1535, 1535, 1536, 1536, 1536, 1536, 1537,    0,
        0,    0, 1537,    0, 1537, 1538, 1538, 1538, 1538, 1539,
        0,    0,    0, 1539,    0, 1539, 1540,    0,    0,    0,
        0, 1540, 1540, 1540,    0,    0, 1540, 1541, 1541,    0,
     1541, 1541,    0,    0,    0, 1541, 1541, 1541, 1542, 1542,
     1542, 1542, 1543, 1543,    0, 1543, 1543,    0,    0,    0,
     1543, 1543, 1543, 1544, 1544, 1544, 1544, 1545,    0,    0,

        0, 1545,    0, 1545, 1546, 1546, 1546, 1546, 1547,    0,
        0,    0, 1547,    0, 1547, 1548, 1548,    0, 1548, 1548,
     1548,    0,    0, 1548, 1548, 1548, 1549, 1549, 1549, 1549,
     1549,    0,    0,    0, 1549, 1549, 1549, 1550, 1550, 1550,
     1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552,    0, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1553,    0, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1554,
        0, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,

     1554, 1554, 1554, 1554, 1554, 1555, 1555,    0, 1555, 1555,
        0,    0,    0, 1555, 1555, 1555, 1556, 1556, 1556, 1556,
     1557,    0,    0,    0, 1557,    0, 1557, 1558, 1558, 1558,
     1558, 1559,    0,    0,    0, 1559,    0, 1559, 1560, 1560,
        0, 1560, 1560, 1560,    0,    0, 1560, 1560, 1560, 1561,
     1561, 1561, 1561, 1561,    0,    0,    0, 1561, 1561, 1561,
     1562, 1562, 1562, 1562, 1563,    0,    0,    0, 1563,    0,
     1563, 1564, 1564, 1564, 1564, 1565,    0,    0,    0, 1565,
        0, 1565, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567,    0,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1568,    0, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1569,    0, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1570, 1570,    0, 1570,
     1570,    0,    0,    0, 1570, 1570, 1570, 1571, 1571, 1571,
     1571, 1572,    0,    0,    0, 1572,    0, 1572, 1573, 1573,
     1573, 1573, 1574,    0,    0,    0, 1574,    0, 1574, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1576,    0, 1576, 1576, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1577,    0, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578,    0, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1579, 1579,    0, 1579, 1579,    0,    0,
        0, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1581,    0,
        0,    0, 1581,    0, 1581, 1582, 1582, 1582, 1582, 1583,
        0,    0,    0, 1583,    0, 1583, 1584,    0,    0,    0,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1585,    0,    0,    0, 1585, 1585, 1585, 1585,

     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1588,    0,    0,    0, 1588,    0, 1588, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591,
     1591,    0, 1591, 1591,    0,    0,    0, 1591, 1591, 1591,
     1592, 1592,    0,    0,    0, 1592, 1593,    0, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1594,    0, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1595,    0,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1596, 1596,    0, 1596, 1596,    0,
        0,    0, 1596, 1596, 1596, 1597, 1597, 1597, 1597, 1599,
     1599,    0, 1599, 1599, 1599,    0,    0, 1599, 1599, 1599,
     1601, 1601,    0, 1601, 1601,    0,    0,    0, 1601, 1601,
     1601, 1602, 1602, 1602, 1602, 1603, 1603,    0, 1603, 1603,
     1603,    0,    0, 1603, 1603, 1603, 1604,    0, 1604, 1604,

     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1606, 1606,    0, 1606, 1606,    0,    0,    0,
     1606, 1606, 1606, 1607, 1607,    0, 1607, 1607,    0,    0,
        0, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1610, 1610,
        0, 1610, 1610, 1610,    0,    0, 1610, 1610, 1610, 1611,
        0, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1613, 1613,    0, 1613, 1613,
        0,    0,    0, 1613, 1613, 1613, 1614,    0, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1616, 1616,    0, 1616, 1616,    0,    0,    0,

     1616, 1616, 1616, 1617,    0,    0, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1618,
        0,    0,    0, 1618,    0, 1618, 1619, 1619,    0, 1619,
     1619,    0,    0,    0, 1619, 1619, 1619, 1620, 1620,    0,
        0,    0, 1620, 1621,    0,    0,    0,    0, 1621, 1621,
        0,    0,    0, 1621, 1622, 1622, 1622, 1622, 1622,    0,
        0,    0, 1622, 1622, 1622, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,

     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[185] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 
    1, 0, 1, 0, 0,     };

static const flex_int16_t yy_rule_linenum[184] =
    {   0,
      117,  143,  147,  148,  149,  150,  227,  231,  237,  239,
      244,  251,  261,  265,  274,  278,  282,  289,  293,  297,
      307,  317,  322,  327,  335,  353,  358,  366,  375,  381,
      394,  406,  418,  425,  433,  445,  458,  464,  471,  478,
      485,  492,  499,  506,  513,  520,  527,  534,  543,  563,
      574,  584,  589,  597,  598,  599,  601,  603,  605,  607,
      616,  620,  624,  628,  630,  638,  641,  645,  649,  663,
      680,  687,  694,  701,  705,  712,  720,  727,  734,  738,
      742,  747,  752,  763,  775,  786,  790,  795,  837,  839,
      844,  852,  859,  866,  930,  932,  936,  940,  944,  958,

      969,  976,  980,  987,  995, 1003, 1007, 1012, 1016, 1026,
     1035, 1044, 1047, 1052, 1057, 1062, 1067, 1072, 1078, 1087,
     1093, 1102, 1106, 1112, 1121, 1128, 1137, 1157, 1178, 1180,
     1181, 1182, 1183, 1203, 1210, 1211, 1215, 1219, 1223, 1227,
     1231, 1235, 1239, 1243, 1244, 1248, 1254, 1260, 1266, 1272,
     1278, 1284, 1293, 1299, 1308, 1312, 1316, 1320, 1324, 1328,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1354, 1355, 1359, 1363, 1365, 1369, 1371, 1381, 1385, 1395,
     1399, 1404, 1408
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gix_esql_scanner.ll"
/*
* Copyright (C) 2021 Marco Ridoni
* Copyright (C) 2013 Tokyo System House Co.,Ltd.
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public License
* as published by the Free Software Foundation; either version 3,
* or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; see the file COPYING.LIB.  If
* not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor
* Boston, MA 02110-1301 USA
*/
/* -*- c++ -*- */
#line 23 "gix_esql_scanner.ll"
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>

#include "gix_esql_driver.hh"
#include "gix_esql_parser.hh"
#include "libcpputils.h"

int flag_insqlstring = 0;
int flag_selectcommand = 0;
int flag_select_from_passed = 0;
int cursor_hold = 0;

int find_last_space(char * s);
int count_crlf(char *s);
int extract_len(char * s);
void extract_precision_scale(char * s, uint16_t *precision, uint16_t *scale);

#ifdef _MSC_VER 
#define strncasecmp _strnicmp
#define strcasecmp _stricmp
#endif

//#define UNPUT_TOKEN() yyless(strlen(yytext));
#define UNPUT_TOKEN() { int i; char *yycopy = strdup( yytext ); for ( i = yyleng - 1; i >= 0; --i ) unput( yycopy[i] ); free( yycopy ); }

#define FLAG_LINKAGE_START	128

// Work around an incompatibility in flex (at least versions
// 2.5.31 through 2.5.33): it generates code that does
// not conform to C89.  See Debian bug 333231
// <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
# undef yywrap

// The location of the current token.
static yy::location loc;

// CHANGE: "Code run each time a pattern is matched" moved from its
// own block below (this change was not strictly necessary).
#define YY_USER_ACTION  loc.columns (yyleng);

// CHANGE: We must exclude unistd.h or the compiler will choke on the
// `isatty()` declaration emitted by `flex` having a different
// exception specifier from the one in `unistd.h`:
#define YY_NO_UNISTD_H

// This should be maintained
#if defined (_DEBUG) && defined (VERBOSE)
const char *GixEsqlLexer::yy_state_descs[NUM_YY_STATES] = { "INITIAL", "PICTURE_STATE", "DATA_DIVISION_STATE", "ESQL_FUNC_STATE", "ESQL_INCLUDE_STATE", 
													"ESQL_SELECT_STATE", "ESQL_STATE", "INCLUDE_STATE", "FD_STATE", "ESQL_DBNAME_STATE", "VAR_DECLARE_STATE", 
													"ESQL_PREPARE_STATE", "ESQL_DECLARE_STATE", "ESQL_EXECUTE_STATE", "ESQL_CONNECT_STATE", "ESQL_IGNORE_STATE"  };
#endif

#line 2850 "gix_esql_scanner.cc"
/* Options: */
/* This works around a win-flex + MSVC bug (unnecessary warnings about macro redefinitions) */

/* Regex abbreviations: */

/* STRVALUE "\""[^\"]+"\""|"\'"[^\'\n]*"\'" */
#line 2857 "gix_esql_scanner.cc"

#define INITIAL 0
#define PICTURE_STATE 1
#define DATA_DIVISION_STATE 2
#define ESQL_FUNC_STATE 3
#define ESQL_INCLUDE_STATE 4
#define ESQL_SELECT_STATE 5
#define ESQL_STATE 6
#define INCLUDE_STATE 7
#define FD_STATE 8
#define ESQL_DBNAME_STATE 9
#define VAR_DECLARE_STATE 10
#define ESQL_PREPARE_STATE 11
#define ESQL_DECLARE_STATE 12
#define ESQL_EXECUTE_STATE 13
#define ESQL_CONNECT_STATE 14
#define ESQL_IGNORE_STATE 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 115 "gix_esql_scanner.ll"


#line 3067 "gix_esql_scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1469 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1468 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 184 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 184 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 185 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 117 "gix_esql_scanner.ll"
{ 
		__yy_push_state(ESQL_FUNC_STATE); 

		driver.startlineno = yylineno - count_crlf(yytext);;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();
		driver.sql_list->clear();
		driver.hostref_or_literal_list->clear();	
		
		driver.commandname = "";
		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";

		driver.hostreferenceCount = 0;
		driver.period = 0;
		driver.cursor_hold = 0;
		driver.command_putother = 0;

		if (driver.lexer.src_location_stack.size() > 0 && !driver.lexer.src_location_stack.top().is_included)
			driver.has_esql_in_cbl_copybooks = true;

		return yy::gix_esql_parser::make_EXECSQL(loc);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 143 "gix_esql_scanner.ll"
{
	__yy_push_state(DATA_DIVISION_STATE);
}
	YY_BREAK
case 3:
#line 148 "gix_esql_scanner.ll"
case 4:
#line 149 "gix_esql_scanner.ll"
case 5:
#line 150 "gix_esql_scanner.ll"
case 6:
YY_RULE_SETUP
#line 150 "gix_esql_scanner.ll"
{
        driver.startlineno = yylineno;
        driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();	
		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";
		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		if (driver.data_division_section != DD_SECTION_INITIAL) {
			switch (driver.data_division_section) {
				case DD_SECTION_WS:
					driver.data_division_section = DD_SECTION_INITIAL;
					driver.commandname ="WORKING_END";
					driver.startlineno = yylineno - 1;
					driver.endlineno = yylineno - 1;
					UNPUT_TOKEN();
					return yy::gix_esql_parser::make_WORKINGEND(loc); 

				case DD_SECTION_LL:
					driver.data_division_section = DD_SECTION_INITIAL;
					driver.commandname ="LOCALSTORAGE_END";
					driver.startlineno = yylineno - 1;
					driver.endlineno = yylineno - 1;
					UNPUT_TOKEN();
					return yy::gix_esql_parser::make_LOCALSTORAGEEND(loc); 

				case DD_SECTION_LS:
					driver.data_division_section = DD_SECTION_INITIAL;
					driver.commandname ="LINKAGE_END";
					driver.startlineno = yylineno - 1;
					driver.endlineno = yylineno - 1;
					UNPUT_TOKEN();
					return yy::gix_esql_parser::make_LINKAGEEND(loc); 

				case DD_SECTION_FS:
					driver.data_division_section = DD_SECTION_INITIAL;
					driver.commandname ="FILE_END";
					driver.startlineno = yylineno - 1;
					driver.endlineno = yylineno - 1;
					UNPUT_TOKEN();
					return yy::gix_esql_parser::make_FILEEND(loc); 
			}
		}

		if (strncasecmp(yytext,"WORKING-STORAGE", 15) == 0) {
				driver.commandname ="WORKING_BEGIN";
				driver.data_division_section = DD_SECTION_WS;
				return yy::gix_esql_parser::make_WORKINGBEGIN(loc); 
			}
			else 
				if (strncasecmp(yytext,"LOCAL-STORAGE", 13) == 0) {
					driver.commandname ="LOCALSTORAGE_BEGIN";
					driver.data_division_section = DD_SECTION_LL;
					return yy::gix_esql_parser::make_LINKAGEBEGIN(loc);
				}
				else 
					if (strncasecmp(yytext,"LINKAGE", 7) == 0) {
						driver.commandname ="LINKAGE_BEGIN";
						driver.data_division_section = DD_SECTION_LS;
						return yy::gix_esql_parser::make_LINKAGEBEGIN(loc);
					}
					else 
						if (strncasecmp(yytext,"FILE", 4) == 0) {
							driver.commandname ="FILE_BEGIN";
							driver.data_division_section = DD_SECTION_FS;
							return yy::gix_esql_parser::make_FILEBEGIN(loc);
						}		

		return yy::gix_esql_parser::make_WORD(yytext, loc);	// should never happen
}
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 227 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 231 "gix_esql_scanner.ll"
{    
		__yy_pop_state();
		return yy::gix_esql_parser::make_PERIOD(loc);
	}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 237 "gix_esql_scanner.ll"
{ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 239 "gix_esql_scanner.ll"
{}
	YY_BREAK


case 11:
YY_RULE_SETUP
#line 244 "gix_esql_scanner.ll"
{
		driver.connectionid = new hostref_or_literal_t(yytext, false);
		__yy_pop_state();

		return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 251 "gix_esql_scanner.ll"
{
		driver.connectionid = new hostref_or_literal_t(yytext, true);
		__yy_pop_state();

		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 13:
YY_RULE_SETUP
#line 261 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_FROM(loc);
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 265 "gix_esql_scanner.ll"
{
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 274 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 278 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 282 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 289 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_IMMEDIATE(loc);
	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 293 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_USING(loc);
	}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 297 "gix_esql_scanner.ll"
{
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		driver.period = 1;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 307 "gix_esql_scanner.ll"
{
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		driver.period = 0;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 317 "gix_esql_scanner.ll"
{
		//driver.connectionid = new hostref_or_literal_t(yytext, false);
		return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 322 "gix_esql_scanner.ll"
{
		//driver.connectionid = new hostref_or_literal_t(yytext, true);
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 327 "gix_esql_scanner.ll"
{
		//driver.connectionid = new hostref_or_literal_t(yytext, true);
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 25:
YY_RULE_SETUP
#line 335 "gix_esql_scanner.ll"
{
		driver.period = 0;
		int n = count_crlf(yytext);
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";
	
		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		__yy_push_state(ESQL_INCLUDE_STATE); 
		return yy::gix_esql_parser::make_INCLUDE(loc);
	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 353 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_DECLARE_STATE);
		return yy::gix_esql_parser::make_DECLARE(loc);
	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 358 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_PREPARE_STATE);
		driver.commandname = "PREPARE_STATEMENT";
		driver.statement_name = "";
		driver.statement_source = nullptr;
		return yy::gix_esql_parser::make_PREPARE(loc);
	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 366 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_EXECUTE_STATE);
		driver.commandname = "EXECUTE";
		driver.statement_name = "";
		driver.statement_source = nullptr;
		return yy::gix_esql_parser::make_EXECUTE(yytext, loc);
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 375 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_DBNAME_STATE);
		return yy::gix_esql_parser::make_AT(loc);
	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 381 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);
		flag_insqlstring = 1;
		flag_selectcommand = 1;

		driver.commandname = yytext;

		driver.sqlnum++;
		driver.sqlname = string_format("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_SELECT(yytext, loc);
	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 394 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname = string_format("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_INSERT(yytext, loc);
	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 406 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname = string_format("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_DELETE(yytext, loc);
	}		
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 418 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_CONNECT_STATE);

		driver.commandname = "CONNECT";
		return yy::gix_esql_parser::make_CONNECT(loc);
	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 425 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "CONNECT_RESET";
		return yy::gix_esql_parser::make_CONNECT_RESET(loc);
	}	
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 433 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);
		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname = string_format("SQ%04d", driver.sqlnum);
		
		return yy::gix_esql_parser::make_DISCONNECT(yytext, loc);
	}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 445 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		flag_insqlstring = 1;

		driver.commandname = yytext;
					
		driver.sqlnum++;
		driver.sqlname = string_format("SQ%04d", driver.sqlnum);
					
		return yy::gix_esql_parser::make_UPDATE(yytext, loc);
	}	
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 458 "gix_esql_scanner.ll"
{
			__yy_push_state(ESQL_STATE);
    	    driver.commandname = "OPEN";
			return yy::gix_esql_parser::make_OPEN(loc);
    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 464 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "CLOSE";
		return yy::gix_esql_parser::make_CLOSE(loc);
	}  
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 471 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "FETCH";
		return yy::gix_esql_parser::make_FETCH(loc);
	}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 478 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "COMMIT_RELEASE";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 485 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "COMMIT_RELEASE";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 492 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "COMMIT";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 499 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "COMMIT";
		return yy::gix_esql_parser::make_COMMIT_WORK(loc);
	}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 506 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "ROLLBACK_RELEASE";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 513 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "ROLLBACK_RELEASE";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 520 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "ROLLBACK";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}     
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 527 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		driver.commandname = "ROLLBACK";
		return yy::gix_esql_parser::make_ROLLBACK_WORK(loc);
	}     
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 534 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_IGNORE_STATE);

		driver.commandname = "IGNORE";
		driver.text_content = "";
		driver.in_ignore_string = true;
		return yy::gix_esql_parser::make_IGNORE(loc);	
	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 543 "gix_esql_scanner.ll"
{
		__yy_push_state(ESQL_STATE);

		flag_insqlstring = 1;

		//driver.commandname = yytext;
		driver.commandname = "PASSTHRU";
					
		
		driver.sqlnum++;
		driver.sqlname = string_format("SQ%04d", driver.sqlnum);
		
		driver.command_putother = 1;
		return yy::gix_esql_parser::make_OTHERFUNC(yytext, loc);
	}
	YY_BREAK


case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 563 "gix_esql_scanner.ll"
{
		driver.endlineno = yylineno;
		driver.in_ignore_string = false;
		driver.period = 1;
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 574 "gix_esql_scanner.ll"
{
		driver.endlineno = yylineno;
		driver.in_ignore_string = false;
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 584 "gix_esql_scanner.ll"
{   
		driver.text_content += yytext;
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);	
	}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 589 "gix_esql_scanner.ll"
{ 
		driver.text_content += yytext;
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 54:
YY_RULE_SETUP
#line 597 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_TO(loc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 598 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_AT(loc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 599 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_AS(loc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 601 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_USER(loc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 603 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_USING(loc); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 605 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_IDENTIFIED_BY(loc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 607 "gix_esql_scanner.ll"
{
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 616 "gix_esql_scanner.ll"
{ 
		return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 620 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 624 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 628 "gix_esql_scanner.ll"
{   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 630 "gix_esql_scanner.ll"
{ 
				ECHO; 
	} 
	YY_BREAK


case 66:
YY_RULE_SETUP
#line 638 "gix_esql_scanner.ll"
{
					return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	          }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 641 "gix_esql_scanner.ll"
{   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 645 "gix_esql_scanner.ll"
{ 
				ECHO; 
	} 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 649 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
					return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			flag_insqlstring = 1;

			driver.commandname = yytext;
					
			driver.sqlnum++;
			driver.sqlname = string_format("SQ%04d", driver.sqlnum);

			return yy::gix_esql_parser::make_SELECT(yytext, loc);
	}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 663 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
				if(!flag_selectcommand){
						return yy::gix_esql_parser::make_TOKEN(yytext, loc);
				} else {
					if (!flag_select_from_passed) {
						flag_select_from_passed = 1;
		      			return yy::gix_esql_parser::make_SELECTFROM(yytext, loc);
					}
					else {
						return yy::gix_esql_parser::make_TOKEN(yytext, loc);
					}
				}
			}
			return yy::gix_esql_parser::make_FROM(loc);
	}  
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 680 "gix_esql_scanner.ll"
{
		if (driver.commandname == "ROLLBACK")
			return yy::gix_esql_parser::make_TO(loc);
		else
			return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 687 "gix_esql_scanner.ll"
{
		if (driver.commandname == "ROLLBACK")
			return yy::gix_esql_parser::make_SAVEPOINT(loc);
		else
			return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 694 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){ 
					return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			return yy::gix_esql_parser::make_CURSOR(loc);
	 }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 701 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_WITH_HOLD(1, loc);
	 }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 705 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);   
			}
			return yy::gix_esql_parser::make_FOR(loc);
	}      
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 712 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){   
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);  
			}
			return yy::gix_esql_parser::make_IDENTIFIED_BY(loc);

	}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 720 "gix_esql_scanner.ll"
{
			if(flag_insqlstring){  
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			return yy::gix_esql_parser::make_USING(loc);
	} 
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 727 "gix_esql_scanner.ll"
{
			if(flag_insqlstring && !flag_selectcommand){
				return yy::gix_esql_parser::make_TOKEN(yytext, loc);
			}
			return yy::gix_esql_parser::make_INTO(yytext, loc);
	} 
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 734 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_WHERE_CURRENT_OF(loc);
	}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 738 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 742 "gix_esql_scanner.ll"
{
			driver.hostlineno = yylineno;
			return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 747 "gix_esql_scanner.ll"
{
			driver.hostlineno = yylineno;   
			return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}	
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 752 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
/*
	{FILENAME} {
			driver.hostlineno = yylineno;   
			return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}	
	*/
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 763 "gix_esql_scanner.ll"
{
			flag_insqlstring = 0;
			flag_selectcommand = 0;
			flag_select_from_passed = 0;
			driver.period = 1;
			driver.endlineno = yylineno;
			__yy_pop_state();	// Not an error, we pop twice
			__yy_pop_state();

			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 775 "gix_esql_scanner.ll"
{
			flag_insqlstring = 0;
			flag_selectcommand = 0;
			flag_select_from_passed = 0;
			driver.endlineno = yylineno;
			__yy_pop_state();	// Not an error, we pop twice
			__yy_pop_state();

			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 786 "gix_esql_scanner.ll"
{ 
			  return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 790 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK

case 88:
YY_RULE_SETUP
#line 795 "gix_esql_scanner.ll"
{

    if (driver.opt_preprocess_copy_files) {
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		
		driver.commandname = "INCFILE";		
		
		int p = find_last_space(yytext);
		if (p < 0)
			p = 5;
		
		std::string tts = std::string(yytext).substr(p);
		tts = string_chop(tts, 1);
		
		driver.incfilename = tts;

		return yy::gix_esql_parser::make_COPY(loc);
	}
}
	YY_BREAK
/*
	"EXEC"[ ]+"SQL"[ \r\n]+"INCLUDE" {
		driver.period = 0;
		int n = count_crlf(yytext);
		driver.startlineno = yylineno - n; 
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";
	
		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		__yy_push_state(ESQL_INCLUDE_STATE); 
		return yy::gix_esql_parser::make_EXECSQL_INCLUDE(loc);
	}
	*/

case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 837 "gix_esql_scanner.ll"
{   } 
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 839 "gix_esql_scanner.ll"
{
		driver.commandname = "INCSQLCA";		
		return yy::gix_esql_parser::make_INCLUDE_SQLCA(loc);
	}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 844 "gix_esql_scanner.ll"
{
		driver.period = 1;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state(); 
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 852 "gix_esql_scanner.ll"
{
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state(); 
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 859 "gix_esql_scanner.ll"
{
		driver.commandname = "INCFILE";		
		driver.incfilename = yytext;
		return yy::gix_esql_parser::make_INCLUDE_FILE(loc);
	}
	YY_BREAK

case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 866 "gix_esql_scanner.ll"
{

	if (driver.data_division_section != DD_SECTION_INITIAL) {
		yy_pop_state();
		switch (driver.data_division_section) {
			case DD_SECTION_WS:
				driver.data_division_section = DD_SECTION_INITIAL;
				driver.commandname ="WORKING_END";
				driver.startlineno = yylineno - 1;
				driver.endlineno = yylineno - 1;
				UNPUT_TOKEN();
				return yy::gix_esql_parser::make_WORKINGEND(loc); 

			case DD_SECTION_LL:
				driver.data_division_section = DD_SECTION_INITIAL;
				driver.commandname ="LOCALSTORAGE_END";
				driver.startlineno = yylineno - 1;
				driver.endlineno = yylineno - 1;
				UNPUT_TOKEN();
				return yy::gix_esql_parser::make_LOCALSTORAGEEND(loc); 

			case DD_SECTION_LS:
				driver.data_division_section = DD_SECTION_INITIAL;
				driver.commandname ="LINKAGE_END";
				driver.startlineno = yylineno - 1;
				driver.endlineno = yylineno - 1;
				UNPUT_TOKEN();
				return yy::gix_esql_parser::make_LINKAGEEND(loc); 

			case DD_SECTION_FS:
				driver.data_division_section = DD_SECTION_INITIAL;
				driver.commandname ="FILE_END";
				driver.startlineno = yylineno - 1;
				driver.endlineno = yylineno - 1;
				UNPUT_TOKEN();
				return yy::gix_esql_parser::make_FILEEND(loc); 
		}
	}
	
	driver.startlineno = yylineno;
	driver.endlineno = yylineno;

	driver.startlineno -= count_crlf(yytext);

	driver.host_reference_list->clear();
	driver.res_host_reference_list->clear();
	driver.cursorname = "";		
	driver.sqlname = "";		
	driver.incfilename = "";				

	driver.commandname = "PROCEDURE_DIVISION";		

	driver.procedure_division_started = true;
	driver.data_division_section = DD_SECTION_INITIAL;

	driver.hostreferenceCount = 0;
	driver.command_putother = 0;
	driver.sql_list->clear();


	return yy::gix_esql_parser::make_PROCEDURE_DIVISION(loc);
}
	YY_BREAK

case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 930 "gix_esql_scanner.ll"
{ }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 932 "gix_esql_scanner.ll"
{    
		return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
	}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 936 "gix_esql_scanner.ll"
{ 
		ECHO; 
	}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 940 "gix_esql_scanner.ll"
{ 
		return yy::gix_esql_parser::make_TABLE(loc);
	}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 944 "gix_esql_scanner.ll"
{
		if(flag_insqlstring){
			return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
		}
		flag_insqlstring = 1;

		driver.commandname = yytext;
						
		driver.sqlnum++;
     	driver.sqlname = string_format("SQ%04d", driver.sqlnum);

		return yy::gix_esql_parser::make_SELECT(yytext, loc); 
	}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 958 "gix_esql_scanner.ll"
{
		if(flag_insqlstring){
			if(!flag_selectcommand){
		      		return yy::gix_esql_parser::make_TOKEN(yytext, loc);      
			} else {
		      		return yy::gix_esql_parser::make_SELECTFROM(strdup (yytext), loc);
			}
		}
		return yy::gix_esql_parser::make_FROM(loc);
	}  
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 969 "gix_esql_scanner.ll"
{
		if(flag_insqlstring){ 
			return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
		}
		return yy::gix_esql_parser::make_CURSOR(loc);
	 }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 976 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_WITH_HOLD(1, loc);
	 }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 980 "gix_esql_scanner.ll"
{
		if(flag_insqlstring){
			return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
		}
		return yy::gix_esql_parser::make_FOR(loc);
	}     
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 987 "gix_esql_scanner.ll"
{
		if(flag_insqlstring){
			return yy::gix_esql_parser::make_TOKEN(strdup (yytext), loc);
		}
		return yy::gix_esql_parser::make_STATEMENT(loc);
	}  
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 995 "gix_esql_scanner.ll"
{
		if(flag_insqlstring && !flag_selectcommand){ 
			return yy::gix_esql_parser::make_TOKEN(yytext, loc);
		}

		return yy::gix_esql_parser::make_INTO(yytext, loc); 
	} 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1003 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1007 "gix_esql_scanner.ll"
{
		driver.hostlineno = yylineno;
		return yy::gix_esql_parser::make_HOSTTOKEN(yytext, loc);
	}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1012 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1016 "gix_esql_scanner.ll"
{
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		driver.period = 1;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1026 "gix_esql_scanner.ll"
{
		flag_insqlstring = 0;
		flag_selectcommand = 0;
		driver.endlineno = yylineno;
		__yy_pop_state();	// Not an error, we pop twice
		__yy_pop_state();
		return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1035 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 112:
YY_RULE_SETUP
#line 1044 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_IS(loc); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1047 "gix_esql_scanner.ll"
{ 
		uint32_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_BINARY(l, loc);        
	}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1052 "gix_esql_scanner.ll"
{ 
		uint32_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_VARBINARY(l, loc);          
	}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1057 "gix_esql_scanner.ll"
{ 
		uint32_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_CHAR(l, loc);            
	}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1062 "gix_esql_scanner.ll"
{ 
		uint32_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_VARCHAR(l, loc);      
	}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1067 "gix_esql_scanner.ll"
{ 
		uint32_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_VARCHAR(l, loc);      
	}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1072 "gix_esql_scanner.ll"
{ 
		int l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_VARCHAR(l, loc);      
	}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1078 "gix_esql_scanner.ll"
{ 
		uint64_t ps = 0;
		uint16_t precision, scale;
		extract_precision_scale(yytext, &precision, &scale);
		ps = precision;
		ps = (ps << 16) | scale;
        return yy::gix_esql_parser::make_FLOAT(ps, loc);      
	}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1087 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_INTEGER(l, loc);      
	}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1093 "gix_esql_scanner.ll"
{ 
		uint64_t ps = 0;
		uint16_t precision, scale;
		extract_precision_scale(yytext, &precision, &scale);
		ps = precision;
		ps = (ps << 16) | scale;
        return yy::gix_esql_parser::make_DECIMAL(ps, loc); 
	}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1102 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_VARBINARY(0, loc);      
	}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1106 "gix_esql_scanner.ll"
{
			driver.endlineno = yylineno;
			__yy_pop_state();
			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1112 "gix_esql_scanner.ll"
{
			driver.period = 1;
			driver.endlineno = yylineno;
			__yy_pop_state();

			return yy::gix_esql_parser::make_END_EXEC(loc);
	}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1121 "gix_esql_scanner.ll"
{
			  return yy::gix_esql_parser::make_TOKEN(yytext, loc);
	}
	YY_BREAK


case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1128 "gix_esql_scanner.ll"
{
        driver.startlineno = yylineno;
        driver.endlineno = yylineno;
		driver.host_reference_list->clear();
        driver.res_host_reference_list->clear();     
		__yy_push_state(VAR_DECLARE_STATE);
		return yy::gix_esql_parser::make_DECLARE_VAR(loc);
	}	
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1137 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.commandname = "HOST_BEGIN";		
		driver.cursorname = "";
		driver.sqlname = "";
		driver.incfilename = "";

		driver.period = yytext[strlen(yytext)-1] == '.' ? 1 : 0;

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		return yy::gix_esql_parser::make_HOSTVARIANTBEGIN(loc);
    }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1157 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.commandname = "HOST_END";		
		driver.cursorname = "";		
		driver.sqlname = "";		
		driver.incfilename = "";		

		driver.period = yytext[strlen(yytext)-1] == '.' ? 1 : 0;

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();

		return yy::gix_esql_parser::make_HOSTVARIANTEND(loc);
    }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1178 "gix_esql_scanner.ll"
{}
	YY_BREAK
case 130:
#line 1181 "gix_esql_scanner.ll"
case 131:
#line 1182 "gix_esql_scanner.ll"
case 132:
#line 1183 "gix_esql_scanner.ll"
case 133:
YY_RULE_SETUP
#line 1183 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno - 1;
		driver.endlineno = yylineno - 1;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();
		
		driver.commandname = "WORKING_END";		
		driver.cursorname = "";		
		driver.sqlname = "";		
		driver.incfilename = "";		
		driver.data_division_section = DD_SECTION_INITIAL;

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;
		driver.sql_list->clear();
   
		__yy_pop_state();
		return yy::gix_esql_parser::make_WORKINGEND(loc);
    }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1203 "gix_esql_scanner.ll"
{
		if (driver.data_division_section == DD_SECTION_FS) {
			__yy_push_state(FD_STATE);
		}
		return yy::gix_esql_parser::make_FD(loc);
	}
	YY_BREAK
case 135:
#line 1211 "gix_esql_scanner.ll"
case 136:
YY_RULE_SETUP
#line 1211 "gix_esql_scanner.ll"
{
		__yy_push_state(PICTURE_STATE);
    }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1215 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_OCCURS(loc);
	}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1219 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_UNBOUNDED(loc);
	}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1223 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_TO(loc);
	}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1227 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_DEPENDING_ON(loc);
	}	
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1231 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_ASCENDING_KEY_IS(loc);
	}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1235 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_INDEXED_BY(loc);
	}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1239 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_NUMERIC(atoi(yytext), loc);
	}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1243 "gix_esql_scanner.ll"
{return yy::gix_esql_parser::make_USAGE(loc);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1244 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_COMP(loc);     
	} 
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1248 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_BINARY(l, loc);      
	}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1254 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_VARBINARY(l, loc);      
	}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1260 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_CHAR(l, loc);      
	}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1266 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16; 
        return yy::gix_esql_parser::make_VARCHAR(l, loc);      
	}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1272 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16; 
        return yy::gix_esql_parser::make_VARCHAR(l, loc);      
	}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1278 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_VARCHAR(l, loc);      
	}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1284 "gix_esql_scanner.ll"
{ 
		uint64_t ps = 0;
		uint16_t precision, scale;
		extract_precision_scale(yytext, &precision, &scale);
		ps = precision;
		ps = (ps << 16) | scale;
        return yy::gix_esql_parser::make_FLOAT(ps, loc);      
	}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1293 "gix_esql_scanner.ll"
{ 
		uint64_t l = extract_len(yytext);
		l = l << 16;
        return yy::gix_esql_parser::make_INTEGER(l, loc);      
	}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1299 "gix_esql_scanner.ll"
{ 
		uint64_t ps = 0;
		uint16_t precision, scale;
		extract_precision_scale(yytext, &precision, &scale);
		ps = precision;
		ps = (ps << 16) | scale;
        return yy::gix_esql_parser::make_DECIMAL(ps, loc); 
	}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1308 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_VARBINARY(0, loc);      
	}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1312 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_COMP_1(loc);        
    }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1316 "gix_esql_scanner.ll"
{ 
        return yy::gix_esql_parser::make_COMP_2(loc);
    }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1320 "gix_esql_scanner.ll"
{
        return yy::gix_esql_parser::make_COMP_3(loc);
    }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1324 "gix_esql_scanner.ll"
{
        return yy::gix_esql_parser::make_COMP_5(loc);
    }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1328 "gix_esql_scanner.ll"
{
		driver.startlineno = yylineno;
		driver.endlineno = yylineno;
		driver.host_reference_list->clear();
		driver.res_host_reference_list->clear();

		driver.cursorname = "";		
		driver.sqlname = "";		
		driver.incfilename = "";		

		driver.hostreferenceCount = 0;
		driver.command_putother = 0;

		return yy::gix_esql_parser::make_SQL_TYPE_IS(loc);
	}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1344 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_SIGN(loc) ;} 
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1345 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_LEADING(loc);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1346 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_SEPARATE(loc); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1347 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_TRAILING(loc); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1348 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_EXTERNAL(loc);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1349 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_IS(loc);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1350 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_ARE(loc);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1351 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_TIMES(loc);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1352 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_VALUE(loc);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1353 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_ALL(loc);} 
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1354 "gix_esql_scanner.ll"
{ return yy::gix_esql_parser::make_CONST(loc); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1355 "gix_esql_scanner.ll"
{
		return yy::gix_esql_parser::make_WORD(yytext, loc);
    }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1359 "gix_esql_scanner.ll"
{    
		return yy::gix_esql_parser::make_PERIOD(loc);
	}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1363 "gix_esql_scanner.ll"
{ }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1365 "gix_esql_scanner.ll"
{}
	YY_BREAK


case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1369 "gix_esql_scanner.ll"
{   }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1371 "gix_esql_scanner.ll"
{
		driver.commandname = "INCFILE";
		driver.incfilename = std::string(yytext) + ".";
		__yy_pop_state();
	    return yy::gix_esql_parser::make_COPY_FILE(loc);
	}
	YY_BREAK


case 178:
YY_RULE_SETUP
#line 1381 "gix_esql_scanner.ll"
{
	/* ignore */
  }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1385 "gix_esql_scanner.ll"
{
	
	__yy_pop_state();
	return yy::gix_esql_parser::make_PICTURE(yytext, loc);
  }
	YY_BREAK

/* default rules */
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 1395 "gix_esql_scanner.ll"
{
	
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1399 "gix_esql_scanner.ll"
{
     
	//Ignore 
}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 1404 "gix_esql_scanner.ll"
{ 

}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1408 "gix_esql_scanner.ll"
{
	if (strlen(yytext) == 1 && yytext[0] == '.') {
		if (!driver.procedure_division_started && string_contains(cur_line_content, "PROGRAM-ID")) {
			std::string pid = string_replace(cur_line_content, "PROGRAM-ID", "");
			pid = trim_copy(string_replace(pid, ".", ""));
			driver.program_id = pid;
		}
		else
			if (isParagraph(cur_line_content)) {
				srcLocation *loc = new srcLocation();
				loc->filename = driver.lexer.src_location_stack.top().filename;
				loc->line = yylineno;
				loc->is_included = driver.lexer.src_location_stack.size() > 1;
				std::string paragraph_name = trim_copy(string_chop(trim_copy(cur_line_content), 1));
			
				driver.paragraphs[paragraph_name] = *loc;
			}
		}
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PICTURE_STATE):
case YY_STATE_EOF(DATA_DIVISION_STATE):
case YY_STATE_EOF(ESQL_FUNC_STATE):
case YY_STATE_EOF(ESQL_INCLUDE_STATE):
case YY_STATE_EOF(ESQL_SELECT_STATE):
case YY_STATE_EOF(ESQL_STATE):
case YY_STATE_EOF(INCLUDE_STATE):
case YY_STATE_EOF(FD_STATE):
case YY_STATE_EOF(ESQL_DBNAME_STATE):
case YY_STATE_EOF(VAR_DECLARE_STATE):
case YY_STATE_EOF(ESQL_PREPARE_STATE):
case YY_STATE_EOF(ESQL_DECLARE_STATE):
case YY_STATE_EOF(ESQL_EXECUTE_STATE):
case YY_STATE_EOF(ESQL_CONNECT_STATE):
case YY_STATE_EOF(ESQL_IGNORE_STATE):
#line 1429 "gix_esql_scanner.ll"
{
	return yy::gix_esql_parser::make_YYEOF(loc);
	//yyterminate ();
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1435 "gix_esql_scanner.ll"
ECHO;
	YY_BREAK
#line 5048 "gix_esql_scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1469 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1469 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1468);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 1435 "gix_esql_scanner.ll"


// CHANGE: The "parts of the driver that need lexer data" have been
// moved to gix_esql_driver.cc (where they really belong) and access the
// new lexer object via its public interface.

// CHANGE: The linker will choke if there's no implementation of the
// default `yylex` even if it's never called.
int yyFlexLexer::yylex() {
    std::cerr << "'int yyFlexLexer::yylex()' should never be called." << std::endl;
    exit(1);
}


int find_last_space(char * s)
{
	char *e = (s + strlen(s)) - 1;
	char * p;
	
	for (p = e; p >= s; p--) {
		if (*p == ' ')
			return (p - s) + 1;
	}
	return -1;

}

int count_crlf(char *s)
{
	int n = 0;
	char *e = (s + strlen(s)) - 1;
	//while (*e) {
	while (e >= s) {
		if (*e == '\n')
			n++;
			
		e--;
	}
	return n;
}

int extract_len(char * s)
{
	std::string st = s;
	
	auto pos = st.find("(");
	if (pos == std::string::npos)
		return 0;

	st = st.substr(pos + 1);

	pos = st.find(")");
	if (pos == std::string::npos)
		return 0;

	st = st.substr(0, pos);

	return atoi(st.c_str());
}

void extract_precision_scale(char *s, uint16_t *precision, uint16_t *scale)
{
	*precision = 0;
	*scale = 0;

	std::string st = s;
	auto pos = st.find("(");
	if (pos == std::string::npos)
		return;

	st = st.substr(pos + 1);

	pos = st.find(")");
	if (pos == std::string::npos)
		return;

	st = st.substr(0, pos);

	pos = st.find(",");
	if (pos == std::string::npos) {
		trim(st);
		*precision = atoi(st.c_str());
		return;
	}

	std::string sn = st.substr(0, pos);
	trim(sn);
	*precision = atoi(sn.c_str());

	sn = st.substr(pos + 1);
	trim(sn);
	*scale = atoi(sn.c_str());
}
